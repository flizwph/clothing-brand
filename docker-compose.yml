version: '3.8'

services:
  # Сервис приложения (может быть масштабирован)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: brand-backend:latest
    restart: always
    depends_on:
      - postgres
      - redis
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      # Конфигурация профиля Spring
      - SPRING_PROFILES_ACTIVE=prod
      # Параметры базы данных
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=branddb
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      # Параметры Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      # Параметры JWT
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=3600000
      - JWT_REFRESH_EXPIRATION=86400000
      # Параметры VK бота
      - VK_ACCESS_TOKEN=${VK_ACCESS_TOKEN}
      - VK_GROUP_ID=${VK_GROUP_ID}
      - VK_SECRET_KEY=${VK_SECRET_KEY}
      - VK_CONFIRMATION_TOKEN=${VK_CONFIRMATION_TOKEN}
      - VK_WEBHOOK_URL=${VK_WEBHOOK_URL}
      - VK_ENABLED=${VK_ENABLED:-false}
    deploy:
      mode: replicated
      replicas: ${APP_REPLICAS:-1}
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Сервис балансировщика нагрузки
  nginx:
    image: nginx:latest
    restart: always
    depends_on:
      - app
    ports:
      - "${NGINX_PORT:-80}:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Сервис базы данных
  postgres:
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_DB: branddb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Сервис Redis для распределенных сессий, кэширования и черных списков токенов
  redis:
    image: redis:alpine
    restart: always
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Сервис мониторинга
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Сервис визуализации метрик
  grafana:
    image: grafana/grafana:latest
    restart: always
    depends_on:
      - prometheus
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
