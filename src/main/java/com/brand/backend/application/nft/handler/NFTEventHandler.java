package com.brand.backend.application.nft.handler;

import com.brand.backend.infrastructure.integration.telegram.user.service.TelegramBotService;
import com.brand.backend.domain.nft.event.NFTEvent;
import com.brand.backend.domain.nft.model.NFT;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.ArrayList;
import java.util.List;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å NFT
 * –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—á–µ—Ä–µ–¥–µ–π —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º Telegram –±–æ—Ç–æ–º
 */
@Component
@Slf4j
public class NFTEventHandler {
    
    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è Telegram –±–æ—Ç–∞
    @Autowired(required = false)
    private TelegramBotService telegramBotService;

    @Async("eventExecutor")
    @EventListener
    public void handleNFTEvent(NFTEvent event) {
        NFT nft = event.getNft();
        log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è NFT: {}, —Ç–∏–ø: {}", nft.getId(), event.getEventType());
        
        try {
            switch (event.getEventType()) {
                case CREATED:
                    notifyUserNFTCreated(nft);
                    break;
                    
                case REVEALED:
                    notifyUserNFTRevealed(nft);
                    break;
                    
                case TRANSFERRED:
                    notifyUserNFTTransferred(nft);
                    break;
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è NFT {}: {}", nft.getId(), e.getMessage(), e);
        }
    }
    
    private void notifyUserNFTCreated(NFT nft) {
        if (nft.getUser().getTelegramId() != null && telegramBotService != null) {
            String message = "üéÅ –í–∞–º –≤—ã–¥–∞–Ω –Ω–æ–≤—ã–π NFT!\n" +
                    "–≠—Ç–æ placeholder-–≤–µ—Ä—Å–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç–∞ –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞.";
            
            SendMessage sendMessage = createNFTMessage(
                    nft.getUser().getTelegramId().toString(), 
                    message,
                    nft.getPlaceholderUri()
            );
            
            try {
                telegramBotService.execute(sendMessage);
                log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", nft.getUser().getUsername());
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT: {}", e.getMessage());
            }
        } else if (telegramBotService == null) {
            log.debug("Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", nft.getUser().getUsername());
        }
    }
    
    private void notifyUserNFTRevealed(NFT nft) {
        if (nft.getUser().getTelegramId() != null && telegramBotService != null) {
            String message = "‚ú® –í–∞—à NFT —Ä–∞—Å–∫—Ä—ã—Ç!\n" +
                    "–†–µ–¥–∫–æ—Å—Ç—å: " + nft.getRarity();
            
            SendMessage sendMessage = createNFTMessage(
                    nft.getUser().getTelegramId().toString(), 
                    message,
                    nft.getRevealedUri()
            );
            
            try {
                telegramBotService.execute(sendMessage);
                log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ NFT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", nft.getUser().getUsername());
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ NFT: {}", e.getMessage());
            }
        } else if (telegramBotService == null) {
            log.debug("Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ NFT –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", nft.getUser().getUsername());
        }
    }
    
    private void notifyUserNFTTransferred(NFT nft) {
        if (nft.getUser().getTelegramId() != null && telegramBotService != null) {
            String message = "üîÑ NFT —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.";
            
            SendMessage sendMessage = new SendMessage();
            sendMessage.setChatId(nft.getUser().getTelegramId().toString());
            sendMessage.setText(message);
            
            try {
                telegramBotService.execute(sendMessage);
                log.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ NFT –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", nft.getUser().getUsername());
            } catch (TelegramApiException e) {
                log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–¥–∞—á–µ NFT: {}", e.getMessage());
            }
        } else if (telegramBotService == null) {
            log.debug("Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ NFT –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", nft.getUser().getUsername());
        }
    }
    
    private SendMessage createNFTMessage(String chatId, String text, String imageUrl) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text + "\n\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: " + imageUrl);
        
        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ NFT
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        
        InlineKeyboardButton viewButton = new InlineKeyboardButton();
        viewButton.setText("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å NFT");
        viewButton.setUrl(imageUrl);
        row.add(viewButton);
        
        rows.add(row);
        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);
        
        return message;
    }
} 