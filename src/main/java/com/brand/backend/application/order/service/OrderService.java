package com.brand.backend.application.order.service;

import com.brand.backend.application.order.util.OrderStatusUtil;
import com.brand.backend.application.promotion.service.PromoCodeService;
import com.brand.backend.presentation.dto.request.OrderDto;
import com.brand.backend.presentation.dto.request.UpdateOrderDto;
import com.brand.backend.presentation.dto.response.DetailedOrderDTO;
import com.brand.backend.presentation.dto.response.OrderItemDTO;
import com.brand.backend.presentation.dto.response.OrderResponseDto;
import com.brand.backend.domain.order.event.OrderEvent;
import com.brand.backend.domain.order.model.DigitalOrder;
import com.brand.backend.domain.order.model.DigitalOrderItem;
import com.brand.backend.domain.order.model.Order;
import com.brand.backend.domain.order.model.OrderStatus;
import com.brand.backend.domain.order.repository.DigitalOrderRepository;
import com.brand.backend.domain.product.model.Product;
import com.brand.backend.domain.user.model.User;
import com.brand.backend.domain.order.repository.OrderRepository;
import com.brand.backend.domain.product.repository.ProductRepository;
import com.brand.backend.domain.user.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.UUID;
import java.math.BigDecimal;

@Slf4j
@Service
@RequiredArgsConstructor
public class OrderService {

    private final OrderRepository orderRepository;
    private final DigitalOrderRepository digitalOrderRepository;
    private final ProductRepository productRepository;
    private final UserRepository userRepository;
    private final ApplicationEventPublisher eventPublisher;
    private final PromoCodeService promoCodeService;

    @Transactional
    public OrderResponseDto createOrder(String username, OrderDto orderDto) {
        log.info("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
        
        User user;
        try {
            user = userRepository.findByUsername(username)
                    .orElseThrow(() -> new UsernameNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: " + username));
            log.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: {}, id: {}", username, user.getId());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", username, e.getMessage(), e);
            throw e;
        }

        Product product = productRepository.findById(orderDto.getProductId())
                .orElseThrow(() -> {
                    log.error("–¢–æ–≤–∞—Ä —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", 
                            orderDto.getProductId(), username);
                    return new RuntimeException("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. ID —Ç–æ–≤–∞—Ä–∞: " + orderDto.getProductId());
                });

        if(!isProductSizeAvailable(product, orderDto.getSize())) {
            log.warn("–¢–æ–≤–∞—Ä {} —Ä–∞–∑–º–µ—Ä–∞ {} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: S={}, M={}, L={}", 
                    product.getName(), orderDto.getSize(),
                    product.getAvailableQuantityS(), 
                    product.getAvailableQuantityM(), 
                    product.getAvailableQuantityL());
            throw new RuntimeException("–¢–æ–≤–∞—Ä –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –†–∞–∑–º–µ—Ä: " + orderDto.getSize());
        }

        String orderNumber = "ORD-" + UUID.randomUUID().toString().substring(0, 8);

        Order order = new Order();
        order.setOrderNumber(orderNumber);
        order.setProduct(product);
        order.setQuantity(orderDto.getQuantity());
        order.setSize(orderDto.getSize());
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        double price = product.getPrice() * orderDto.getQuantity();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        String promoCode = orderDto.getPromoCode();
        if (promoCode != null && !promoCode.isEmpty()) {
            try {
                if (promoCodeService.isPromoCodeValid(promoCode)) {
                    price = promoCodeService.applyPromoCode(promoCode, price);
                    log.info("–ü—Ä–æ–º–æ–∫–æ–¥ {} –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –∑–∞–∫–∞–∑—É {}. –ù–æ–≤–∞—è —Ü–µ–Ω–∞: {}", 
                            promoCode, orderNumber, price);
                } else {
                    log.warn("–ü—Ä–æ–º–æ–∫–æ–¥ {} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {}", promoCode, orderNumber);
                }
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ {}: {}", promoCode, e.getMessage());
            }
        }
        
        order.setPrice(price);

        // –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ OrderDto (–∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –º–æ–≥—É—Ç —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º)
        order.setEmail(orderDto.getEmail());
        order.setPhoneNumber(orderDto.getPhoneNumber());
        order.setFullName(orderDto.getFullName());
        order.setCountry(orderDto.getCountry());
        order.setAddress(orderDto.getAddress());
        order.setPostalCode(orderDto.getPostalCode());
        order.setTelegramUsername(orderDto.getTelegramUsername());
        order.setCryptoAddress(orderDto.getCryptoAddress());
        order.setOrderComment(orderDto.getOrderComment());
        order.setPromoCode(orderDto.getPromoCode());
        order.setPaymentMethod(orderDto.getPaymentMethod());
        order.setCreatedAt(LocalDateTime.now());
        order.setUser(user);

        order.setStatus(OrderStatus.NEW);

        Order savedOrder = orderRepository.save(order);

        reduceProductQuantity(product, orderDto.getSize());

        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        eventPublisher.publishEvent(new OrderEvent(this, savedOrder, OrderEvent.OrderEventType.CREATED));

        log.info("‚úÖ [ORDER CREATED] –ó–∞–∫–∞–∑ {} —Å–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", orderNumber, username);
        return mapToDto(savedOrder);
    }

    public Optional<OrderResponseDto> getOrderById(Long id) {
        return orderRepository.findById(id).map(this::mapToDto);
    }

    public List<OrderResponseDto> getUserOrders(String username) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        return orderRepository.findByUser(user).stream().map(this::mapToDto).toList();
    }

    public List<OrderResponseDto> getAllOrders() {
        return orderRepository.findAll().stream().map(this::mapToDto).toList();
    }

    @Transactional
    public void cancelOrder(Long orderId, String username) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        if (!order.getUser().getUsername().equals(username)) {
            throw new RuntimeException("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑");
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º 24-—á–∞—Å–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        if (!canModifyOrder(order)) {
            throw new RuntimeException("–°—Ä–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å
        if (order.getStatus() == OrderStatus.COMPLETED || order.getStatus() == OrderStatus.CANCELLED) {
            throw new RuntimeException("–ù–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: " + order.getStatus());
        }

        // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ CANCELLED –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è
        order.setStatus(OrderStatus.CANCELLED);
        order.setUpdatedAt(LocalDateTime.now());
        orderRepository.save(order);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥
        restoreProductQuantity(order.getProduct(), order.getSize(), order.getQuantity());
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞
        eventPublisher.publishEvent(new OrderEvent(this, order, OrderEvent.OrderEventType.CANCELED));
        
        log.info("üóë [ORDER CANCELED] –ó–∞–∫–∞–∑ {} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", order.getOrderNumber(), username);
    }
    
    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)
     */
    @Transactional
    public OrderResponseDto updateOrder(Long orderId, String username, UpdateOrderDto updateDto) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        if (!order.getUser().getUsername().equals(username)) {
            throw new RuntimeException("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º 24-—á–∞—Å–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
        if (!canModifyOrder(order)) {
            throw new RuntimeException("–°—Ä–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫ (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)");
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if (order.getStatus() == OrderStatus.COMPLETED || order.getStatus() == OrderStatus.CANCELLED) {
            throw new RuntimeException("–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: " + order.getStatus());
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
        if (updateDto.getEmail() != null) {
            order.setEmail(updateDto.getEmail());
        }
        if (updateDto.getFullName() != null) {
            order.setFullName(updateDto.getFullName());
        }
        if (updateDto.getCountry() != null) {
            order.setCountry(updateDto.getCountry());
        }
        if (updateDto.getAddress() != null) {
            order.setAddress(updateDto.getAddress());
        }
        if (updateDto.getPostalCode() != null) {
            order.setPostalCode(updateDto.getPostalCode());
        }
        if (updateDto.getPhoneNumber() != null) {
            order.setPhoneNumber(updateDto.getPhoneNumber());
        }
        if (updateDto.getTelegramUsername() != null) {
            order.setTelegramUsername(updateDto.getTelegramUsername());
        }
        if (updateDto.getCryptoAddress() != null) {
            order.setCryptoAddress(updateDto.getCryptoAddress());
        }
        if (updateDto.getOrderComment() != null) {
            order.setOrderComment(updateDto.getOrderComment());
        }
        
        order.setUpdatedAt(LocalDateTime.now());
        Order savedOrder = orderRepository.save(order);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        eventPublisher.publishEvent(new OrderEvent(this, savedOrder, OrderEvent.OrderEventType.UPDATED));
        
        log.info("‚úèÔ∏è [ORDER UPDATED] –ó–∞–∫–∞–∑ {} –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {}", order.getOrderNumber(), username);
        return mapToDto(savedOrder);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑ (24-—á–∞—Å–æ–≤–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
     */
    private boolean canModifyOrder(Order order) {
        LocalDateTime createdAt = order.getCreatedAt();
        LocalDateTime now = LocalDateTime.now();
        long hoursElapsed = ChronoUnit.HOURS.between(createdAt, now);
        return hoursElapsed <= 24;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∫–ª–∞–¥ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
     */
    private void restoreProductQuantity(Product product, String size, int quantity) {
        switch (size.toLowerCase()) {
            case "s" -> product.setAvailableQuantityS(product.getAvailableQuantityS() + quantity);
            case "m" -> product.setAvailableQuantityM(product.getAvailableQuantityM() + quantity);
            case "l" -> product.setAvailableQuantityL(product.getAvailableQuantityL() + quantity);
            default -> log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥: {}", size);
        }
        productRepository.save(product);
        log.info("üì¶ –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ —Å–∫–ª–∞–¥: {} —à—Ç. —Ä–∞–∑–º–µ—Ä–∞ {} –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {}", 
                quantity, size, product.getName());
    }
    
    @Transactional
    public OrderResponseDto updateOrderStatus(Long orderId, OrderStatus newStatus) {
        Order order = orderRepository.findById(orderId)
                .orElseThrow(() -> new RuntimeException("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        OrderStatus oldStatus = order.getStatus();
        order.setStatus(newStatus);
        order.setUpdatedAt(LocalDateTime.now());
        
        Order savedOrder = orderRepository.save(order);
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        OrderEvent.OrderEventType eventType;
        switch (newStatus) {
            case PROCESSING:
                eventType = OrderEvent.OrderEventType.PAID;
                break;
            case DISPATCHED:
                eventType = OrderEvent.OrderEventType.SHIPPED;
                break;
            case COMPLETED:
                eventType = OrderEvent.OrderEventType.DELIVERED;
                break;
            default:
                eventType = OrderEvent.OrderEventType.UPDATED;
                break;
        }
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        eventPublisher.publishEvent(new OrderEvent(this, savedOrder, eventType));
        
        log.info("üîÑ [ORDER STATUS UPDATED] –ó–∞–∫–∞–∑ {} –æ–±–Ω–æ–≤–ª–µ–Ω —Å {} –Ω–∞ {}", 
                order.getOrderNumber(), oldStatus, newStatus);
        
        return mapToDto(savedOrder);
    }

    private boolean isProductSizeAvailable(Product product, String size) {
        return switch (size.toLowerCase()) {
            case "s" -> product.getAvailableQuantityS() > 0;
            case "m" -> product.getAvailableQuantityM() > 0;
            case "l" -> product.getAvailableQuantityL() > 0;
            default -> {
                log.warn("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {}", size);
                yield false;
            }
        };
    }

    private void reduceProductQuantity(Product product, String size) {
        switch (size.toLowerCase()) {
            case "s" -> product.setAvailableQuantityS(product.getAvailableQuantityS() - 1);
            case "m" -> product.setAvailableQuantityM(product.getAvailableQuantityM() - 1);
            case "l" -> product.setAvailableQuantityL(product.getAvailableQuantityL() - 1);
            default -> log.error("–ü–æ–ø—ã—Ç–∫–∞ —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞: {}", size);
        }
        productRepository.save(product);
    }

    private OrderResponseDto mapToDto(Order order) {
        return new OrderResponseDto(
                order.getId(),
                order.getOrderNumber(),
                order.getProduct().getName(),
                order.getSize(),
                order.getQuantity(),
                order.getPrice(),
                order.getTelegramUsername(),
                order.getPaymentMethod(),
                order.getOrderComment(),
                order.getCreatedAt(),
                order.getStatus()
        );
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    public List<DetailedOrderDTO> getActiveOrdersDetailed(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        List<DetailedOrderDTO> result = new ArrayList<>();
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        List<Order> orders = orderRepository.findByUser(user).stream()
                .filter(order -> OrderStatusUtil.isActiveOrder(order.getStatus()))
                .toList();
        
        for (Order order : orders) {
            result.add(mapToDetailedDTO(order));
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        List<DigitalOrder> digitalOrders = digitalOrderRepository.findAllByUserOrderByCreatedAtDesc(user).stream()
                .filter(order -> !order.isPaid()) // –ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º–∏
                .toList();
        
        for (DigitalOrder digitalOrder : digitalOrders) {
            result.add(mapToDetailedDTO(digitalOrder));
        }
        
        return result;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
     */
    public List<DetailedOrderDTO> getOrderHistoryDetailed(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        List<DetailedOrderDTO> result = new ArrayList<>();
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        List<Order> orders = orderRepository.findByUser(user).stream()
                .filter(order -> !OrderStatusUtil.isActiveOrder(order.getStatus()))
                .toList();
        
        for (Order order : orders) {
            result.add(mapToDetailedDTO(order));
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
        List<DigitalOrder> digitalOrders = digitalOrderRepository.findAllByUserOrderByCreatedAtDesc(user).stream()
                .filter(DigitalOrder::isPaid) // –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º –∏—Å—Ç–æ—Ä–∏–µ–π
                .toList();
        
        for (DigitalOrder digitalOrder : digitalOrders) {
            result.add(mapToDetailedDTO(digitalOrder));
        }
        
        return result;
    }

    /**
     * –ú–∞–ø–ø–∏–Ω–≥ –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ DetailedOrderDTO
     */
    private DetailedOrderDTO mapToDetailedDTO(Order order) {
        List<OrderItemDTO> items = new ArrayList<>();
        
        // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
        OrderItemDTO item = new OrderItemDTO(
                order.getProduct().getId(),
                order.getProduct().getName(),
                "–û–¥–µ–∂–¥–∞",
                order.getQuantity(),
                order.getPrice() / order.getQuantity(), // –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
                order.getPrice(),
                order.getSize(),
                null // –ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        );
        items.add(item);
        
        return new DetailedOrderDTO(
                order.getId(),
                order.getOrderNumber(),
                items,
                order.getTrackingNumber(),
                OrderStatusUtil.getStatusInRussian(order.getStatus()),
                order.getStatus().name(),
                order.getPrice(),
                order.getCreatedAt(),
                order.getPaymentMethod()
        );
    }

    /**
     * –ú–∞–ø–ø–∏–Ω–≥ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ DetailedOrderDTO
     */
    private DetailedOrderDTO mapToDetailedDTO(DigitalOrder digitalOrder) {
        List<OrderItemDTO> items = new ArrayList<>();
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
        for (DigitalOrderItem orderItem : digitalOrder.getItems()) {
            OrderItemDTO item = new OrderItemDTO(
                    orderItem.getDigitalProduct().getId(),
                    orderItem.getDigitalProduct().getName(),
                    "–¶–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç",
                    orderItem.getQuantity(),
                    orderItem.getPrice(),
                    orderItem.getTotalPrice(),
                    null, // –†–∞–∑–º–µ—Ä –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º –∫ —Ü–∏—Ñ—Ä–æ–≤—ã–º —Ç–æ–≤–∞—Ä–∞–º
                    orderItem.getActivationCode()
            );
            items.add(item);
        }
        
        String status = digitalOrder.isPaid() ? "–í—ã–ø–æ–ª–Ω–µ–Ω" : "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã";
        String statusCode = digitalOrder.isPaid() ? "COMPLETED" : "NEW";
        
        return new DetailedOrderDTO(
                digitalOrder.getId(),
                digitalOrder.getOrderNumber(),
                items,
                null, // –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω—É–∂–µ–Ω
                status,
                statusCode,
                digitalOrder.getTotalPrice(),
                digitalOrder.getCreatedAt(),
                digitalOrder.getPaymentMethod()
        );
    }
}
