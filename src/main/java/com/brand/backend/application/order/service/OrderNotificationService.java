package com.brand.backend.application.order.service;

import com.brand.backend.domain.order.model.DigitalOrder;
import com.brand.backend.domain.order.model.Order;
import com.brand.backend.infrastructure.integration.telegram.admin.AdminTelegramBot;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –∑–∞–∫–∞–∑–∞—Ö
 */
@Service
@Slf4j
public class OrderNotificationService {
    
    private final ApplicationContext applicationContext;
    
    public OrderNotificationService(ApplicationContext applicationContext) {
        this.applicationContext = applicationContext;
    }
    
    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
     */
    public void notifyNewOrder(Order order) {
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: {}", order.getOrderNumber());
        
        String message = formatOrderNotification(order);
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
        InlineKeyboardMarkup keyboard = createOrderActionKeyboard(order.getId());
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º AdminTelegramBot –∏–∑ ApplicationContext —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω –Ω—É–∂–µ–Ω
            AdminTelegramBot adminTelegramBot = applicationContext.getBean(AdminTelegramBot.class);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —á–∞—Ç–æ–≤ –∏–∑ Telegram-–±–æ—Ç–∞
            Set<String> adminIds = adminTelegramBot.getAllowedAdminIds();
            for (String chatId : adminIds) {
                sendMessageWithKeyboard(adminTelegramBot, chatId, message, keyboard);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ –∑–∞–∫–∞–∑–µ: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
     */
    public void notifyNewDigitalOrder(DigitalOrder order) {
        log.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: {}", order.getOrderNumber());
        
        String message = formatDigitalOrderNotification(order);
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º
        InlineKeyboardMarkup keyboard = createDigitalOrderActionKeyboard(order.getId());
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º AdminTelegramBot –∏–∑ ApplicationContext —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω –Ω—É–∂–µ–Ω
            AdminTelegramBot adminTelegramBot = applicationContext.getBean(AdminTelegramBot.class);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö —á–∞—Ç–æ–≤ –∏–∑ Telegram-–±–æ—Ç–∞
            Set<String> adminIds = adminTelegramBot.getAllowedAdminIds();
            for (String chatId : adminIds) {
                sendMessageWithKeyboard(adminTelegramBot, chatId, message, keyboard);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º –æ —Ü–∏—Ñ—Ä–æ–≤–æ–º –∑–∞–∫–∞–∑–µ: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    private void sendMessageWithKeyboard(AdminTelegramBot bot, String chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("HTML");
        message.setReplyMarkup(keyboard);
        
        try {
            bot.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram –∞–¥–º–∏–Ω—É {}: {}", chatId, e.getMessage(), e);
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–æ–º
     */
    private InlineKeyboardMarkup createOrderActionKeyboard(Long orderId) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –†—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        InlineKeyboardButton processingButton = new InlineKeyboardButton();
        processingButton.setText("‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ");
        processingButton.setCallbackData("updateOrder:" + orderId + ":PROCESSING");
        row1.add(processingButton);
        
        // –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"
        InlineKeyboardButton dispatchedButton = new InlineKeyboardButton();
        dispatchedButton.setText("üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω");
        dispatchedButton.setCallbackData("updateOrder:" + orderId + ":DISPATCHED");
        row1.add(dispatchedButton);
        
        keyboard.add(row1);
        
        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
        InlineKeyboardButton detailsButton = new InlineKeyboardButton();
        detailsButton.setText("üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏");
        detailsButton.setCallbackData("viewOrder:" + orderId);
        row2.add(detailsButton);
        
        // –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞
        InlineKeyboardButton userButton = new InlineKeyboardButton();
        userButton.setText("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ");
        userButton.setCallbackData("viewUser:" + orderId + ":fromOrder");
        row2.add(userButton);
        
        keyboard.add(row2);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ü–∏—Ñ—Ä–æ–≤—ã–º –∑–∞–∫–∞–∑–æ–º
     */
    private InlineKeyboardMarkup createDigitalOrderActionKeyboard(Long orderId) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –†—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"
        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É");
        confirmButton.setCallbackData("confirmDigitalOrder:" + orderId);
        row1.add(confirmButton);
        
        keyboard.add(row1);
        
        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
        InlineKeyboardButton detailsButton = new InlineKeyboardButton();
        detailsButton.setText("üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏");
        detailsButton.setCallbackData("viewDigitalOrder:" + orderId);
        row2.add(detailsButton);
        
        // –ö–Ω–æ–ø–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞
        InlineKeyboardButton userButton = new InlineKeyboardButton();
        userButton.setText("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ");
        userButton.setCallbackData("viewUserDigital:" + orderId);
        row2.add(userButton);
        
        keyboard.add(row2);
        
        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
     */
    private String formatOrderNotification(Order order) {
        StringBuilder addressInfo = new StringBuilder();
        if (order.getAddress() != null && !order.getAddress().isEmpty()) {
            addressInfo.append("<b>–ê–¥—Ä–µ—Å:</b> ").append(order.getCountry() != null ? order.getCountry() + ", " : "")
                    .append(order.getAddress());
            
            if (order.getPostalCode() != null && !order.getPostalCode().isEmpty()) {
                addressInfo.append(", ").append(order.getPostalCode());
            }
            addressInfo.append("\n");
        }
        
        return String.format(
                "<b>üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó #%s</b>\n\n" +
                "<b>–ö–ª–∏–µ–Ω—Ç:</b> %s\n" +
                "<b>–¢–æ–≤–∞—Ä:</b> %s\n" +
                "<b>–†–∞–∑–º–µ—Ä:</b> %s\n" +
                "<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> %d\n" +
                "<b>–°—É–º–º–∞:</b> %.2f ‚ÇΩ\n" +
                "<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> %s\n" +
                "%s" +
                "<b>Email:</b> %s\n" +
                "<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> %s\n" +
                "%s" +
                "<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> %s\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º",
                order.getOrderNumber(),
                order.getUser().getUsername(),
                order.getProduct().getName(),
                order.getSize(),
                order.getQuantity(),
                order.getPrice(),
                order.getPaymentMethod(),
                addressInfo.toString(),
                order.getEmail() != null ? order.getEmail() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                order.getPhoneNumber() != null ? order.getPhoneNumber() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                order.getOrderComment() != null && !order.getOrderComment().isEmpty() ? 
                        "<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> " + order.getOrderComment() + "\n" : "",
                order.getCreatedAt().toString().replace("T", " ").substring(0, 16)
        );
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ü–∏—Ñ—Ä–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
     */
    private String formatDigitalOrderNotification(DigitalOrder order) {
        NumberFormat formatter = NumberFormat.getCurrencyInstance(new Locale("ru", "RU"));
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
        String productsInfo = order.getItems().stream()
                .map(item -> String.format("‚Ä¢ %s (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: %d, —Ü–µ–Ω–∞: %s)\n", 
                        item.getDigitalProduct().getName(), 
                        item.getQuantity(),
                        formatter.format(item.getPrice())))
                .collect(Collectors.joining());
        
        return String.format(
                "<b>üîî –ù–û–í–´–ô –¶–ò–§–†–û–í–û–ô –ó–ê–ö–ê–ó #%s</b>\n\n" +
                "<b>–ö–ª–∏–µ–Ω—Ç:</b> %s\n" +
                "<b>–¢–æ–≤–∞—Ä—ã:</b>\n%s" +
                "<b>–û–±—â–∞—è —Å—É–º–º–∞:</b> %s\n" +
                "<b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> %s\n" +
                "<b>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã:</b> %s\n" +
                "<b>Email:</b> %s\n" +
                "<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> %s\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º",
                order.getOrderNumber(),
                order.getUser().getUsername(),
                productsInfo,
                formatter.format(order.getTotalPrice()),
                order.getPaymentMethod(),
                order.isPaid() ? "‚úÖ –û–ø–ª–∞—á–µ–Ω" : "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω",
                order.getUser().getEmail() != null ? order.getUser().getEmail() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                order.getCreatedAt().toString().replace("T", " ").substring(0, 16)
        );
    }
}