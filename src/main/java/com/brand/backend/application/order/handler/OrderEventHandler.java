package com.brand.backend.application.order.handler;

import com.brand.backend.infrastructure.integration.telegram.user.service.TelegramBotService;
import com.brand.backend.infrastructure.integration.telegram.admin.AdminTelegramBot;
import com.brand.backend.domain.order.event.OrderEvent;
import com.brand.backend.domain.nft.model.NFT;
import com.brand.backend.domain.order.model.Order;
import com.brand.backend.domain.order.model.OrderStatus;
import com.brand.backend.application.nft.service.NFTService;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–∫–∞–∑–∞–º–∏
 */
@Component
@RequiredArgsConstructor
public class OrderEventHandler {

    private static final Logger log = LoggerFactory.getLogger(OrderEventHandler.class);

    private final TelegramBotService telegramBotService;
    private final AdminTelegramBot adminTelegramBot;
    private final NFTService nftService;

    @Async("eventExecutor")
    @EventListener
    public void handleOrderEvent(OrderEvent event) {
        Order order = event.getOrder();
        log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞: {}, —Ç–∏–ø: {}", order.getOrderNumber(), event.getEventType());
        
        try {
            switch (event.getEventType()) {
                case CREATED:
                    notifyUserOrderCreated(order);
                    notifyAdminOrderCreated(order);
                    break;
                    
                case PAID:
                    createNFTForOrder(order);
                    notifyUserOrderPaid(order);
                    break;
                    
                case UPDATED:
                    notifyUserOrderUpdated(order);
                    break;
                    
                case SHIPPED:
                    notifyUserOrderShipped(order);
                    break;
                    
                case DELIVERED:
                    notifyUserOrderDelivered(order);
                    break;
                    
                case CANCELED:
                    notifyUserOrderCanceled(order);
                    notifyAdminOrderCanceled(order);
                    break;
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞ {}: {}", order.getOrderNumber(), e.getMessage(), e);
        }
    }
    
    private void createNFTForOrder(Order order) {
        if (order.getStatus() == OrderStatus.PROCESSING) {
            try {
                String placeholderUri = "https://brand.com/nft/placeholder";
                String rarity = "common"; // –ë–∞–∑–æ–≤–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å, –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º
                NFT nft = nftService.createNFTForOrder(order, placeholderUri, rarity);
                log.info("NFT —Å–æ–∑–¥–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞: {}, NFT ID: {}", order.getOrderNumber(), nft.getId());
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ NFT –¥–ª—è –∑–∞–∫–∞–∑–∞: {}", order.getOrderNumber(), e);
            }
        }
    }
    
    private void notifyUserOrderCreated(Order order) {
        if (order.getUser().getTelegramId() != null) {
            sendTelegramMessage(
                order.getUser().getTelegramId().toString(),
                "‚úÖ –ó–∞–∫–∞–∑ #" + order.getOrderNumber() + " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n" +
                "–¢–æ–≤–∞—Ä: " + order.getProduct().getName() + "\n" +
                "–†–∞–∑–º–µ—Ä: " + order.getSize() + "\n" +
                "–°—É–º–º–∞: " + order.getPrice() + " RUB"
            );
        }
    }
    
    private void notifyAdminOrderCreated(Order order) {
        sendAdminTelegramMessage(
            "üîî –ù–û–í–´–ô –ó–ê–ö–ê–ó #" + order.getOrderNumber() + "\n" +
            "–¢–æ–≤–∞—Ä: " + order.getProduct().getName() + "\n" +
            "–†–∞–∑–º–µ—Ä: " + order.getSize() + "\n" +
            "–°—É–º–º–∞: " + order.getPrice() + " RUB\n" +
            "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: " + order.getUser().getUsername()
        );
    }
    
    private void notifyUserOrderPaid(Order order) {
        if (order.getUser().getTelegramId() != null) {
            sendTelegramMessage(
                order.getUser().getTelegramId().toString(),
                "üí∞ –ó–∞–∫–∞–∑ #" + order.getOrderNumber() + " —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω!\n" +
                "–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω NFT, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."
            );
        }
    }
    
    private void notifyUserOrderUpdated(Order order) {
        if (order.getUser().getTelegramId() != null) {
            sendTelegramMessage(
                order.getUser().getTelegramId().toString(),
                "üîÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #" + order.getOrderNumber() + " –æ–±–Ω–æ–≤–ª–µ–Ω: " + order.getStatus()
            );
        }
    }
    
    private void notifyUserOrderShipped(Order order) {
        if (order.getUser().getTelegramId() != null) {
            sendTelegramMessage(
                order.getUser().getTelegramId().toString(),
                "üöö –ó–∞–∫–∞–∑ #" + order.getOrderNumber() + " –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n" +
                "–°–∫–æ—Ä–æ –æ–Ω –±—É–¥–µ—Ç —É –≤–∞—Å."
            );
        }
    }
    
    private void notifyUserOrderDelivered(Order order) {
        if (order.getUser().getTelegramId() != null) {
            sendTelegramMessage(
                order.getUser().getTelegramId().toString(),
                "üì¶ –ó–∞–∫–∞–∑ #" + order.getOrderNumber() + " –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n" +
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ."
            );
        }
    }
    
    private void notifyUserOrderCanceled(Order order) {
        if (order.getUser().getTelegramId() != null) {
            sendTelegramMessage(
                order.getUser().getTelegramId().toString(),
                "‚ùå –ó–∞–∫–∞–∑ #" + order.getOrderNumber() + " –æ—Ç–º–µ–Ω–µ–Ω."
            );
        }
    }
    
    private void notifyAdminOrderCanceled(Order order) {
        sendAdminTelegramMessage(
            "‚ùå –ó–ê–ö–ê–ó –û–¢–ú–ï–ù–ï–ù #" + order.getOrderNumber() + "\n" +
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + order.getUser().getUsername()
        );
    }
    
    private void sendTelegramMessage(String chatId, String text) {
        try {
            SendMessage message = new SendMessage();
            message.setChatId(chatId);
            message.setText(text);
            telegramBotService.execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {}", e.getMessage());
        }
    }
    
    private void sendAdminTelegramMessage(String text) {
        try {
            for (String chatId : adminTelegramBot.getAllowedAdminIds()) {
                SendMessage message = new SendMessage();
                message.setChatId(chatId);
                message.setText(text);
                adminTelegramBot.execute(message);
                log.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å ID {}", chatId);
            }
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {}", e.getMessage());
        }
    }
} 