package com.brand.backend.application.payment.service;

import com.brand.backend.domain.payment.model.Transaction;
import com.brand.backend.domain.payment.model.TransactionStatus;
import com.brand.backend.domain.payment.repository.TransactionRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.LocalDateTime;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π)
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class TransactionAdminService {

    private final TransactionRepository transactionRepository;
    private final BalanceService balanceService;

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID
     */
    @Transactional(readOnly = true)
    public Optional<Transaction> getTransactionDetails(Long transactionId) {
        return transactionRepository.findByIdWithUser(transactionId);
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
     */
    @Transactional
    public Transaction confirmDeposit(String transactionCode, String adminInfo) {
        return balanceService.confirmDeposit(transactionCode, adminInfo);
    }

    /**
     * –û—Ç–∫–ª–æ–Ω—è–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
     */
    @Transactional
    public Transaction rejectDeposit(String transactionCode, String reason, String adminInfo) {
        return balanceService.rejectDeposit(transactionCode, reason, adminInfo);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    @Transactional(readOnly = true)
    public List<Transaction> getAllTransactions() {
        return transactionRepository.findAll();
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
     */
    @Transactional(readOnly = true)
    public List<Transaction> getTransactionsByStatus(TransactionStatus status) {
        return transactionRepository.findByStatus(status);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    @Transactional(readOnly = true)
    public List<Transaction> getTransactionsToday() {
        LocalDateTime startOfDay = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
        return transactionRepository.findByCreatedAtAfter(startOfDay);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
     */
    @Transactional(readOnly = true)
    public List<Transaction> getTransactionsThisWeek() {
        LocalDateTime startOfWeek = LocalDateTime.now().minusDays(7);
        return transactionRepository.findByCreatedAtAfter(startOfWeek);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –º–µ—Å—è—Ü
     */
    @Transactional(readOnly = true)
    public List<Transaction> getTransactionsThisMonth() {
        LocalDateTime startOfMonth = LocalDateTime.now().withDayOfMonth(1).withHour(0).withMinute(0).withSecond(0);
        return transactionRepository.findByCreatedAtAfter(startOfMonth);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
     */
    public boolean canConfirmTransaction(Transaction transaction) {
        return transaction != null && transaction.getStatus() == TransactionStatus.PENDING;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
     */
    public String formatDateTime(LocalDateTime dateTime) {
        if (dateTime == null) return "";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm:ss");
        return dateTime.format(formatter);
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    public String getStatusEmoji(TransactionStatus status) {
        return switch (status) {
            case PENDING -> "‚è≥";
            case COMPLETED -> "‚úÖ";
            case REJECTED -> "‚ùå";
            case CANCELLED -> "üö´";
            default -> "";
        };
    }
} 