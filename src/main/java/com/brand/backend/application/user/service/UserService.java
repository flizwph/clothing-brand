package com.brand.backend.application.user.service;

import com.brand.backend.presentation.dto.request.UserDTO;
import com.brand.backend.presentation.dto.response.SubscriptionInfoDTO;
import com.brand.backend.presentation.dto.response.UserStatsDTO;
import com.brand.backend.common.exception.UserNotFoundException;
import com.brand.backend.domain.user.model.User;
import com.brand.backend.domain.user.repository.UserRepository;
import com.brand.backend.domain.order.repository.OrderRepository;
import com.brand.backend.domain.nft.repository.NFTRepository;
import com.brand.backend.domain.subscription.repository.SubscriptionRepository;
import com.brand.backend.domain.order.model.Order;
import com.brand.backend.domain.order.model.OrderStatus;
import com.brand.backend.domain.subscription.model.Subscription;
import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;
import com.brand.backend.domain.user.event.UserEvent;
import org.springframework.context.ApplicationEventPublisher;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

@Slf4j
@RequiredArgsConstructor
@Service
public class UserService {

    private final UserRepository userRepository;
    private final OrderRepository orderRepository;
    private final NFTRepository nftRepository;
    private final SubscriptionRepository subscriptionRepository;
    private final PasswordEncoder passwordEncoder;
    private final ApplicationEventPublisher eventPublisher;

    // ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    public UserDTO getCurrentUser() {
        String username = getAuthenticatedUsername();
        User user = getUserByUsername(username);

        UserDTO dto = new UserDTO();
        dto.setId(user.getId());
        dto.setUsername(user.getUsername());
        dto.setRole(user.getRole());
        dto.setActive(user.isActive());
        dto.setTelegramId(user.getTelegramId());
        dto.setCreatedAt(user.getCreatedAt());
        dto.setUpdatedAt(user.getUpdatedAt());
        dto.setVerificationCode(user.getVerificationCode());
        dto.setVerified(user.isVerified());
        dto.setDiscordId(user.getDiscordId());
        dto.setLastLogin(user.getLastLogin());
        dto.setTelegramUsername(user.getTelegramUsername());
        dto.setDiscordUsername(user.getDiscordUsername());
        dto.setVkUsername(user.getVkUsername());
        dto.setLinkedDiscord(user.isLinkedDiscord());
        dto.setLinkedVkontakte(user.isLinkedVkontakte());
        dto.setEmail(user.getEmail());
        dto.setPhoneNumber(user.getPhoneNumber());
        
        // –ù–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–æ—Ñ–∏–ª—è
        dto.setLiviumBalance(user.getLiviumBalance());
        dto.setDiscordAvatarUrl(user.getDiscordAvatarUrl());
        dto.setTelegramAvatarUrl(user.getTelegramAvatarUrl());
        dto.setVkAvatarUrl(user.getVkAvatarUrl());
        dto.setVkId(user.getVkId());
        
        // –°—Ç–∞—Ç—É—Å—ã –ø—Ä–∏–≤—è–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        dto.setDiscordLinked(user.isDiscordLinked());
        dto.setTelegramLinked(user.isTelegramLinked());
        dto.setVkLinked(user.isVkLinked());

        return dto;
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram
    public boolean isTelegramVerified() {
        String username = getAuthenticatedUsername();
        return getUserByUsername(username).isVerified();
    }

    // ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º User
    @Transactional
    public void updateUserProfile(User user, String newUsername, String newEmail, String newPhoneNumber) {
        if (newUsername != null && !newUsername.isBlank()) {
            user.setUsername(newUsername);
        }
        if (newEmail != null && !newEmail.isBlank()) {
            user.setEmail(newEmail);
        }
        if (newPhoneNumber != null && !newPhoneNumber.isBlank()) {
            user.setPhoneNumber(newPhoneNumber);
        }

        user.setUpdatedAt(LocalDateTime.now());
        userRepository.save(user);

        log.info("‚úÖ [USER UPDATED] {} –æ–±–Ω–æ–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å: username={}, email={}, phone={}",
                user.getUsername(), newUsername, newEmail, newPhoneNumber);
    }

    // ‚úÖ –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º User
    @Transactional
    public void changePassword(User user, String oldPassword, String newPassword) {
        if (!passwordEncoder.matches(oldPassword, user.getPasswordHash())) {
            throw new IllegalArgumentException("Invalid old password");
        }

        user.setPasswordHash(passwordEncoder.encode(newPassword));
        userRepository.save(user);
        log.info("‚úÖ [PASSWORD CHANGED] –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {}", user.getUsername());
    }

    // üîπ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    public String getAuthenticatedUsername() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        return authentication.getName();
    }

    public User getUserByUsername(String username) {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new UserNotFoundException("User not found"));
    }

    @Transactional
    public void linkTelegramAccount(String username, Long telegramId, String telegramUsername) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        user.setTelegramId(telegramId);
        user.setTelegramUsername(telegramUsername);
        user.setTelegramLinked(true);
        user.setUpdatedAt(LocalDateTime.now());
        user.setVerified(true);
        
        User savedUser = userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
        eventPublisher.publishEvent(new UserEvent(this, savedUser, UserEvent.UserEventType.LINKED_TELEGRAM));
        
        log.info("Telegram –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", username);
    }

    @Transactional
    public void linkTelegramAccountWithAvatar(String username, Long telegramId, String telegramUsername, String avatarUrl) {
        User user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        user.setTelegramId(telegramId);
        user.setTelegramUsername(telegramUsername);
        user.setTelegramAvatarUrl(avatarUrl);
        user.setTelegramLinked(true);
        user.setUpdatedAt(LocalDateTime.now());
        user.setVerified(true);
        
        User savedUser = userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
        eventPublisher.publishEvent(new UserEvent(this, savedUser, UserEvent.UserEventType.LINKED_TELEGRAM));
        
        log.info("Telegram –∞–∫–∫–∞—É–Ω—Ç —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", username);
    }
    
    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Discord –∞–∫–∫–∞—É–Ω—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     *
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param discordId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Discord
     * @param discordUsername –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Discord
     * @return true, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
     */
    @Transactional
    public boolean linkDiscordAccount(String username, Long discordId, String discordUsername) {
        User user = getUserByUsername(username);
        
        user.setDiscordId(discordId);
        user.setDiscordUsername(discordUsername);
        user.setLinkedDiscord(true);
        user.setDiscordLinked(true);
        user.setUpdatedAt(LocalDateTime.now());
        
        userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Discord
        eventPublisher.publishEvent(new UserEvent(this, user, UserEvent.UserEventType.LINKED_DISCORD));
        
        log.info("Discord –∞–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", username);
        return true;
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Discord –∞–∫–∫–∞—É–Ω—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
     *
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param discordId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Discord
     * @param discordUsername –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Discord
     * @param avatarUrl URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return true, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
     */
    @Transactional
    public boolean linkDiscordAccountWithAvatar(String username, Long discordId, String discordUsername, String avatarUrl) {
        User user = getUserByUsername(username);
        
        user.setDiscordId(discordId);
        user.setDiscordUsername(discordUsername);
        user.setDiscordAvatarUrl(avatarUrl);
        user.setLinkedDiscord(true);
        user.setDiscordLinked(true);
        user.setUpdatedAt(LocalDateTime.now());
        
        userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Discord
        eventPublisher.publishEvent(new UserEvent(this, user, UserEvent.UserEventType.LINKED_DISCORD));
        
        log.info("Discord –∞–∫–∫–∞—É–Ω—Ç —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", username);
        return true;
    }

    /**
     * –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç VK –∞–∫–∫–∞—É–Ω—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     *
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param vkId –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VK
     * @param vkUsername –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ VK
     * @param avatarUrl URL –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return true, –µ—Å–ª–∏ –ø—Ä–∏–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
     */
    @Transactional
    public boolean linkVkAccount(String username, Long vkId, String vkUsername, String avatarUrl) {
        User user = getUserByUsername(username);
        
        user.setVkId(vkId);
        user.setVkUsername(vkUsername);
        user.setVkAvatarUrl(avatarUrl);
        user.setLinkedVkontakte(true);
        user.setVkLinked(true);
        user.setUpdatedAt(LocalDateTime.now());
        
        userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ VK
        eventPublisher.publishEvent(new UserEvent(this, user, UserEvent.UserEventType.LINKED_VK));
        
        log.info("VK –∞–∫–∫–∞—É–Ω—Ç —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {}", username);
        return true;
    }

    @Transactional
    public User register(String username, String password, String email) {
        if (userRepository.findByUsername(username).isPresent()) {
            throw new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
        
        User user = new User();
        user.setUsername(username);
        user.setPasswordHash(passwordEncoder.encode(password));
        user.setEmail(email);
        user.setRole("ROLE_USER");
        user.setCreatedAt(LocalDateTime.now());
        
        String verificationCode = generateVerificationCode();
        user.setVerificationCode(verificationCode);
        
        User savedUser = userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        eventPublisher.publishEvent(new UserEvent(this, savedUser, UserEvent.UserEventType.REGISTERED));
        
        return savedUser;
    }
    
    @Transactional
    public void verifyUser(String verificationCode) {
        User user = userRepository.findByVerificationCode(verificationCode)
                .orElseThrow(() -> new RuntimeException("–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"));
        
        user.setVerified(true);
        user.setVerificationCode(null);
        user.setUpdatedAt(LocalDateTime.now());
        
        User savedUser = userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        eventPublisher.publishEvent(new UserEvent(this, savedUser, UserEvent.UserEventType.VERIFIED));
    }
    
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
    
    private String generateVerificationCode() {
        return UUID.randomUUID().toString().substring(0, 8);
    }

    @Transactional
    public String generateAndSaveVerificationCode(String username) {
        User user = getUserByUsername(username);
        String code = generateVerificationCode();
        user.setVerificationCode(code);
        userRepository.save(user);
        return code;
    }
    
    public User getUserByVerificationCode(String code) {
        return userRepository.findByVerificationCode(code).orElse(null);
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–æ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç User –≤ DTO
     */
    public UserDTO convertToDTO(User user) {
        UserDTO dto = new UserDTO();
        dto.setId(user.getId());
        dto.setUsername(user.getUsername());
        dto.setRole(user.getRole());
        dto.setActive(user.isActive());
        dto.setTelegramId(user.getTelegramId());
        dto.setCreatedAt(user.getCreatedAt());
        dto.setUpdatedAt(user.getUpdatedAt());
        dto.setVerificationCode(user.getVerificationCode());
        dto.setVerified(user.isVerified());
        dto.setDiscordId(user.getDiscordId());
        dto.setLastLogin(user.getLastLogin());
        dto.setTelegramUsername(user.getTelegramUsername());
        dto.setDiscordUsername(user.getDiscordUsername());
        dto.setVkUsername(user.getVkUsername());
        dto.setLinkedDiscord(user.isLinkedDiscord());
        dto.setLinkedVkontakte(user.isLinkedVkontakte());
        dto.setEmail(user.getEmail());
        dto.setPhoneNumber(user.getPhoneNumber());
        // –ù–æ–≤—ã–µ –ø–æ–ª—è
        dto.setLiviumBalance(user.getLiviumBalance());
        dto.setDiscordAvatarUrl(user.getDiscordAvatarUrl());
        dto.setTelegramAvatarUrl(user.getTelegramAvatarUrl());
        dto.setVkAvatarUrl(user.getVkAvatarUrl());
        dto.setVkId(user.getVkId());
        // –°—Ç–∞—Ç—É—Å—ã –ø—Ä–∏–≤—è–∑–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        dto.setDiscordLinked(user.isDiscordLinked());
        dto.setTelegramLinked(user.isTelegramLinked());
        dto.setVkLinked(user.isVkLinked());
        return dto;
    }

    /**
     * –û—Ç–≤—è–∑—ã–≤–∞–µ—Ç Discord –∞–∫–∫–∞—É–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     *
     * @param username –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return true, –µ—Å–ª–∏ –æ—Ç–≤—è–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞
     */
    @Transactional
    public boolean unlinkDiscordAccount(String username) {
        User user = getUserByUsername(username);
        
        if (!user.isLinkedDiscord()) {
            log.warn("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–≤—è–∑–∞—Ç—å Discord –∞–∫–∫–∞—É–Ω—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏: {}", username);
            return false;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∞
        String oldDiscordUsername = user.getDiscordUsername();
        Long oldDiscordId = user.getDiscordId();
        
        // –û—Ç–≤—è–∑—ã–≤–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç
        user.setDiscordId(null);
        user.setDiscordUsername(null);
        user.setLinkedDiscord(false);
        user.setDiscordLinked(false);
        user.setUpdatedAt(LocalDateTime.now());
        
        userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ—Ç–≤—è–∑–∫–∏ Discord
        eventPublisher.publishEvent(new UserEvent(this, user, UserEvent.UserEventType.UNLINKED_DISCORD));
        
        log.info("Discord –∞–∫–∫–∞—É–Ω—Ç –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, –±—ã–ª discordId={}, discordUsername={}", 
                username, oldDiscordId, oldDiscordUsername);
        return true;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public UserStatsDTO getUserStats(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UserNotFoundException("User not found"));

        // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤—Å–µ –∫—Ä–æ–º–µ COMPLETED)
        int activeOrders = (int) orderRepository.findByUser(user).stream()
                .filter(order -> order.getStatus() != OrderStatus.COMPLETED)
                .count();

        // –ü–æ–¥—Å—á–µ—Ç NFT –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        int nftCollection = nftRepository.findByUser(user).size();

        // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        int orderHistory = orderRepository.findByUser(user).size();

        return new UserStatsDTO(activeOrders, nftCollection, orderHistory);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public SubscriptionInfoDTO getUserSubscriptionInfo(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UserNotFoundException("User not found"));

        List<Subscription> activeSubscriptions = subscriptionRepository.findByUserAndIsActiveTrue(user);
        
        if (activeSubscriptions.isEmpty()) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
            SubscriptionInfoDTO dto = new SubscriptionInfoDTO();
            dto.setLevel("NONE");
            dto.setActive(false);
            dto.setStartDate(null);
            dto.setEndDate(null);
            dto.setPrice(BigDecimal.ZERO);
            dto.setName("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏");
            dto.setAutoRenewal(false);
            dto.setDaysRemaining(0);
            dto.setNextBillingDate(null);
            dto.setLimits(null);
            dto.setUsage(null);
            return dto;
        }

        // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
        Subscription subscription = activeSubscriptions.get(0);

        SubscriptionInfoDTO dto = new SubscriptionInfoDTO();
        dto.setLevel(subscription.getSubscriptionLevel().name());
        dto.setActive(subscription.isActive());
        dto.setStartDate(subscription.getStartDate());
        dto.setEndDate(subscription.getEndDate());
        dto.setPrice(getSubscriptionPrice(subscription.getSubscriptionLevel().name()));
        dto.setName(getSubscriptionName(subscription.getSubscriptionLevel().name()));
        dto.setAutoRenewal(subscription.isAutoRenewal());
        dto.setDaysRemaining(calculateDaysRemaining(subscription.getEndDate()));
        dto.setNextBillingDate(subscription.isAutoRenewal() ? subscription.getEndDate() : null);
        dto.setLimits(null); // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
        dto.setUsage(null);  // TODO: –¥–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        return dto;
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private BigDecimal getSubscriptionPrice(String level) {
        return switch (level) {
            case "BASIC" -> new BigDecimal("299");
            case "STANDARD" -> new BigDecimal("599");
            case "PREMIUM" -> new BigDecimal("999");
            default -> BigDecimal.ZERO;
        };
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private String getSubscriptionName(String level) {
        return switch (level) {
            case "BASIC" -> "–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞";
            case "STANDARD" -> "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞";
            case "PREMIUM" -> "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞";
        };
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private int calculateDaysRemaining(LocalDateTime endDate) {
        if (endDate == null) return 0;
        return (int) java.time.temporal.ChronoUnit.DAYS.between(LocalDateTime.now(), endDate);
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ Discord –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
     */
    @Transactional
    public void linkDiscordAccount(Long userId, Long discordId, String discordUsername, String discordAvatarUrl) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UserNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        user.setDiscordId(discordId);
        user.setDiscordUsername(discordUsername);
        user.setDiscordAvatarUrl(discordAvatarUrl);
        user.setDiscordLinked(true);
        user.setUpdatedAt(LocalDateTime.now());
        
        userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ Discord
        eventPublisher.publishEvent(new UserEvent(this, user, UserEvent.UserEventType.LINKED_DISCORD));
        
        log.info("Discord –∞–∫–∫–∞—É–Ω—Ç {} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", discordUsername, user.getUsername());
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
     */
    @Transactional
    public void linkTelegramAccount(Long userId, Long telegramId, String telegramUsername, String telegramAvatarUrl) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UserNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        user.setTelegramId(telegramId);
        user.setTelegramUsername(telegramUsername);
        user.setTelegramAvatarUrl(telegramAvatarUrl);
        user.setTelegramLinked(true);
        user.setUpdatedAt(LocalDateTime.now());
        
        userRepository.save(user);
        
        log.info("Telegram –∞–∫–∫–∞—É–Ω—Ç {} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", telegramUsername, user.getUsername());
    }

    /**
     * –ü—Ä–∏–≤—è–∑–∫–∞ VK –∞–∫–∫–∞—É–Ω—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π
     */
    @Transactional
    public void linkVkAccount(Long userId, String vkId, String vkUsername, String vkAvatarUrl) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new UserNotFoundException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID " + userId + " –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        user.setVkId(Long.valueOf(vkId));
        user.setVkUsername(vkUsername);
        user.setVkAvatarUrl(vkAvatarUrl);
        user.setVkLinked(true);
        user.setUpdatedAt(LocalDateTime.now());
        
        userRepository.save(user);
        
        // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ VK
        eventPublisher.publishEvent(new UserEvent(this, user, UserEvent.UserEventType.LINKED_VK));
        
        log.info("VK –∞–∫–∫–∞—É–Ω—Ç {} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", vkUsername, user.getUsername());
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Optional –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
     */
    public java.util.Optional<User> findByUsername(String username) {
        return userRepository.findByUsername(username);
    }
}
