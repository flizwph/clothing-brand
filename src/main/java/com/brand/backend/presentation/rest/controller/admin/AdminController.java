package com.brand.backend.presentation.rest.controller.admin;

import com.brand.backend.presentation.dto.response.OrderResponseDto;
import com.brand.backend.domain.order.model.OrderStatus;
import com.brand.backend.application.nft.service.NFTService;
import com.brand.backend.application.order.service.OrderService;
import com.brand.backend.application.admin.cqrs.query.GetDashboardStatsQuery;
import com.brand.backend.application.admin.cqrs.result.DashboardStatsResult;
import com.brand.backend.application.auth.bus.QueryBus;
import com.brand.backend.domain.user.model.User;
import com.brand.backend.application.auth.service.notification.TelegramNotificationService;
import com.brand.backend.application.payment.service.AdminNotificationService;
import com.brand.backend.domain.user.repository.UserRepository;
import com.brand.backend.presentation.dto.request.admin.AdminNotificationRequestDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@RestController
@RequestMapping("/api/admin")
@RequiredArgsConstructor
@Tag(name = "Admin General", description = "–û–±—â–∏–µ –∞–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã")
public class AdminController {

    private final OrderService orderService;
    private final NFTService nftService;
    private final QueryBus queryBus;
    private final TelegramNotificationService telegramNotificationService;
    private final UserRepository userRepository;

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (alias –¥–ª—è /api/admin/dashboard/stats)
     */
    @GetMapping("/stats")
    @Operation(summary = "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", description = "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞"),
            @ApiResponse(responseCode = "403", description = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> getGeneralStats(
            @AuthenticationPrincipal User admin) {
        
        log.info("üìä [ADMIN STATS] –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {}", admin.getUsername());
        
        try {
            GetDashboardStatsQuery query = GetDashboardStatsQuery.builder().build();
            DashboardStatsResult result = queryBus.dispatch(query);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("data", result);
            
            log.info("‚úÖ [ADMIN STATS] –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è: {}", admin.getUsername());
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("üî• [ADMIN STATS] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è {}: {}", 
                    admin.getUsername(), e.getMessage(), e);
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
            errorResponse.put("error", e.getMessage());
            
            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
     */
    @PostMapping("/notifications")
    @Operation(summary = "–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", description = "–ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã"),
            @ApiResponse(responseCode = "400", description = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"),
            @ApiResponse(responseCode = "403", description = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    })
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Map<String, Object>> sendNotifications(
            @AuthenticationPrincipal User admin,
            @Valid @RequestBody AdminNotificationRequestDto request) {
        
        log.info("üì¢ [ADMIN NOTIFICATION] –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç {}: —Ç–∏–ø={}, –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π={}", 
                admin.getUsername(), request.getType(), 
                request.getUserIds() != null ? request.getUserIds().size() : "ALL");
        
        try {
            int sentCount = 0;
            int failedCount = 0;
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if (request.getUserIds() != null && !request.getUserIds().isEmpty()) {
                // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                for (Long userId : request.getUserIds()) {
                    try {
                        User user = userRepository.findById(userId).orElse(null);
                        if (user != null && user.getTelegramChatId() != null) {
                            boolean sent = telegramNotificationService.sendAdminMessage(
                                    user.getTelegramChatId(), 
                                    formatNotificationMessage(request, admin.getUsername())
                            );
                            if (sent) {
                                sentCount++;
                            } else {
                                failedCount++;
                            }
                        } else {
                            failedCount++;
                        }
                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", userId, e.getMessage());
                        failedCount++;
                    }
                }
            } else {
                // –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å Telegram
                var activeUsers = userRepository.findByIsActiveTrueAndTelegramChatIdIsNotNull();
                for (User user : activeUsers) {
                    try {
                        boolean sent = telegramNotificationService.sendAdminMessage(
                                user.getTelegramChatId(), 
                                formatNotificationMessage(request, admin.getUsername())
                        );
                        if (sent) {
                            sentCount++;
                        } else {
                            failedCount++;
                        }
                    } catch (Exception e) {
                        log.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", user.getUsername(), e.getMessage());
                        failedCount++;
                    }
                }
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
            response.put("sentCount", sentCount);
            response.put("failedCount", failedCount);
            response.put("totalAttempts", sentCount + failedCount);
            
            log.info("‚úÖ [ADMIN NOTIFICATION] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {}: —É—Å–ø–µ—à–Ω–æ={}, –æ—à–∏–±–æ–∫={}", 
                    admin.getUsername(), sentCount, failedCount);
            
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("üî• [ADMIN NOTIFICATION] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–æ–º {}: {}", 
                    admin.getUsername(), e.getMessage(), e);
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
            errorResponse.put("error", e.getMessage());
            
            return ResponseEntity.badRequest().body(errorResponse);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    private String formatNotificationMessage(AdminNotificationRequestDto request, String adminUsername) {
        StringBuilder message = new StringBuilder();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        String emoji = switch (request.getType().toUpperCase()) {
            case "INFO" -> "‚ÑπÔ∏è";
            case "WARNING" -> "‚ö†Ô∏è";
            case "ERROR" -> "üö®";
            case "SUCCESS" -> "‚úÖ";
            case "MAINTENANCE" -> "üîß";
            case "ANNOUNCEMENT" -> "üì¢";
            default -> "üìù";
        };
        
        message.append(emoji).append(" **–£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û–¢ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¶–ò–ò**\n\n");
        message.append("**–¢–∏–ø:** ").append(request.getType().toUpperCase()).append("\n");
        message.append("**–°–æ–æ–±—â–µ–Ω–∏–µ:**\n").append(request.getMessage()).append("\n\n");
        
        if (request.getTitle() != null && !request.getTitle().isEmpty()) {
            message.insert(message.indexOf("**–¢–∏–ø:**"), "**" + request.getTitle() + "**\n\n");
        }
        
        message.append("_–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: ").append(adminUsername).append("_");
        
        return message.toString();
    }

    // –ú–µ—Ç–æ–¥ getAllOrders –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ AdminOrderController

    @PreAuthorize("hasRole('ADMIN')")
    @PutMapping("/orders/{orderId}/status")
    public ResponseEntity<OrderResponseDto> updateOrderStatus(
            @PathVariable Long orderId,
            @RequestBody Map<String, String> statusRequest) {
        
        String statusString = statusRequest.get("status");
        if (statusString == null) {
            return ResponseEntity.badRequest().build();
        }
        
        try {
            OrderStatus newStatus = OrderStatus.valueOf(statusString.toUpperCase());
            OrderResponseDto updatedOrder = orderService.updateOrderStatus(orderId, newStatus);
            return ResponseEntity.ok(updatedOrder);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    @PreAuthorize("hasRole('ADMIN')")
    @PostMapping("/nft/{nftId}/reveal")
    public ResponseEntity<?> revealNFT(
            @PathVariable Long nftId,
            @RequestBody Map<String, String> revealRequest) {
        
        String revealedUri = revealRequest.get("revealedUri");
        if (revealedUri == null) {
            return ResponseEntity.badRequest().build();
        }
        
        try {
            nftService.revealNFT(nftId, revealedUri);
            return ResponseEntity.ok().build();
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }
    
    // –ú–µ—Ç–æ–¥ getAllUsers –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ AdminUserController
} 