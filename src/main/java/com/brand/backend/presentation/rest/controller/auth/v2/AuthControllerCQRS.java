package com.brand.backend.presentation.rest.controller.auth.v2;

import com.brand.backend.application.auth.cqrs.result.LoginCommandResult;
import com.brand.backend.application.auth.cqrs.result.RefreshTokenResult;
import com.brand.backend.application.auth.core.exception.InvalidCredentialsException;
import com.brand.backend.application.auth.core.exception.UserBlockedException;
import com.brand.backend.application.auth.core.exception.UserNotVerifiedException;
import com.brand.backend.application.auth.core.exception.UsernameExistsException;
import com.brand.backend.application.auth.cqrs.result.ValidateTokenResult;
import com.brand.backend.application.auth.service.facade.AuthServiceCQRS;
import com.brand.backend.domain.user.model.User;
import com.brand.backend.presentation.dto.request.ChangePasswordRequest;
import com.brand.backend.presentation.dto.request.UserLoginRequest;
import com.brand.backend.presentation.dto.request.UserRegistrationRequest;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.HashMap;
import java.util.Map;

import com.brand.backend.application.user.service.VerificationService;
import java.util.Optional;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CQRS
 */
@Slf4j
@RestController
@RequestMapping("/api/auth/v2")
@RequiredArgsConstructor
public class AuthControllerCQRS {

    private final AuthServiceCQRS authService;
    private final VerificationService verificationService;

    @PostMapping("/register")
    public ResponseEntity<Map<String, String>> registerUser(@RequestBody @Valid UserRegistrationRequest request) {
        log.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {}", request.getUsername());
        
        User user = authService.registerUser(
            request.getUsername(), 
            request.getEmail(), 
            request.getPassword(), 
            request.getConfirmPassword()
        );

        Map<String, String> response = new HashMap<>();
        response.put("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
        response.put("verificationCode", user.getVerificationCode());
        response.put("username", user.getUsername());
        response.put("email", user.getEmail());

        log.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} —Å email: {}", request.getUsername(), request.getEmail());
        return ResponseEntity.status(HttpStatus.CREATED).body(response);
    }

    @PostMapping("/login")
    public ResponseEntity<Map<String, String>> loginUser(@RequestBody @Valid UserLoginRequest request) {
        try {
            log.info("üì• [LOGIN] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ö–æ–¥: {}", request.getUsername());

            LoginCommandResult result = authService.login(request.getUsername(), request.getPassword());
            Map<String, String> response = new HashMap<>();

            if (!result.isSuccess()) {
                log.info("‚ùå [LOGIN] –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞: {}", request.getUsername());
                response.put("message", result.getMessage());
                
                if (result.isNeedsVerification()) {
                    response.put("verificationCode", result.getVerificationCode());
                    return ResponseEntity.status(HttpStatus.FORBIDDEN).body(response);
                }
                
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            log.info("‚úÖ [LOGIN SUCCESS] –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: {}", request.getUsername());
            response.put("message", result.getMessage());
            response.put("accessToken", result.getAccessToken());
            response.put("refreshToken", result.getRefreshToken());

            return ResponseEntity.ok()
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + result.getAccessToken())
                    .body(response);
        } catch (UserBlockedException e) {
            log.warn("üîí [LOGIN BLOCKED] –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏: {}", request.getUsername());
            
            Map<String, String> response = new HashMap<>();
            response.put("error", "User blocked");
            response.put("message", e.getMessage());
            response.put("minutesLeft", String.valueOf(e.getMinutesLeft()));
            
            return ResponseEntity.status(HttpStatus.TOO_MANY_REQUESTS).body(response);
        } catch (UserNotVerifiedException e) {
            log.warn("‚ö†Ô∏è [LOGIN FAILED] –ù–µ–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏: {}", request.getUsername());
            
            Map<String, String> response = new HashMap<>();
            response.put("error", "User not verified");
            response.put("message", "Your account is not verified. Please verify your account with Telegram bot.");
            response.put("verificationCode", e.getVerificationCode());
            response.put("status", "not_verified");
            
            return ResponseEntity.status(HttpStatus.FORBIDDEN).body(response);
        } catch (Exception e) {
            log.error("üî• [LOGIN ERROR] –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", 
                    request.getUsername(), e.getMessage());
            
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "An error occurred during login");
            errorResponse.put("error", e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    @PostMapping("/refresh")
    public ResponseEntity<Map<String, String>> refreshAccessToken(@RequestBody Map<String, String> request) {
        try {
            String refreshToken = request.get("refreshToken");
            
            if (refreshToken == null || refreshToken.isBlank()) {
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("message", "Refresh token is required");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            }
            
            RefreshTokenResult result = authService.refreshToken(refreshToken);
            Map<String, String> response = new HashMap<>();
            
            if (!result.isSuccess()) {
                response.put("message", result.getMessage());
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }
            
            response.put("accessToken", result.getAccessToken());
            response.put("message", result.getMessage());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            log.error("üî• [REFRESH ERROR] Unexpected error: {}", e.getMessage());
            
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "An error occurred during token refresh");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    @PostMapping("/logout")
    public ResponseEntity<?> logout(@RequestHeader(value = HttpHeaders.AUTHORIZATION, required = false) String authHeader) {
        try {
            // Extract username from the JWT token
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("message", "Authorization header with Bearer token is required");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
            }
            
            String token = authHeader.substring(7);
            ValidateTokenResult validationResult = authService.validateToken(token);
            
            if (!validationResult.isValid()) {
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("message", "Invalid token");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(errorResponse);
            }
            
            String username = validationResult.getUsername();
            
            boolean result = authService.logout(username);
            
            if (!result) {
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("message", "User not found");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
            }
            
            return ResponseEntity.noContent().build();
        } catch (Exception e) {
            log.error("üî• [LOGOUT ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {}", e.getMessage());
            
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "An error occurred during logout");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }
    
    @PostMapping("/change-password")
    public ResponseEntity<Map<String, String>> changePassword(@RequestBody @Valid ChangePasswordRequest request, Authentication authentication) {
        try {
            String username;
            if (authentication.getPrincipal() instanceof User) {
                username = ((User) authentication.getPrincipal()).getUsername();
            } else {
                username = authentication.getName();
            }
            
            log.info("üîë [CHANGE PASSWORD] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", username);
            
            boolean success = authService.changePassword(
                    username, 
                    request.getCurrentPassword(), 
                    request.getNewPassword());
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "Password changed successfully. Please login again with your new password.");
            
            return ResponseEntity.ok(response);
        } catch (InvalidCredentialsException e) {
            log.warn("‚ùå [CHANGE PASSWORD] –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: {}", e.getMessage());
            
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("error", "Invalid credentials");
            errorResponse.put("message", e.getMessage());
            
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
        } catch (Exception e) {
            log.error("üî• [CHANGE PASSWORD ERROR] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {}", e.getMessage(), e);
            
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "An error occurred while changing password");
            
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Telegram
     */
    @PostMapping("/generate-telegram-code")
    public ResponseEntity<Map<String, String>> generateTelegramCode(@RequestBody Map<String, String> request) {
        try {
            String username = request.get("username");
            
            if (username == null || username.isBlank()) {
                Map<String, String> errorResponse = new HashMap<>();
                errorResponse.put("success", "false");
                errorResponse.put("message", "Username is required");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            }
            
            log.info("üîÑ [GENERATE TELEGRAM CODE] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è: {}", username);
            
            String verificationCode = verificationService.generateAndSaveVerificationCode(username);
            
            Map<String, String> response = new HashMap<>();
            response.put("success", "true");
            response.put("message", "–ù–æ–≤—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω");
            response.put("verificationCode", verificationCode);
            response.put("username", username);
            
            log.info("‚úÖ [GENERATE TELEGRAM CODE] –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è: {}", username);
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            log.warn("‚ùå [GENERATE TELEGRAM CODE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", e.getMessage());
            
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("success", "false");
            errorResponse.put("message", e.getMessage());
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(errorResponse);
        } catch (Exception e) {
            log.error("üî• [GENERATE TELEGRAM CODE ERROR] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞: {}", e.getMessage(), e);
            
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("success", "false");
            errorResponse.put("message", "An error occurred during code generation");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ OPTIONS –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è CORS preflight
     */
    @RequestMapping(value = "/login-verified", method = RequestMethod.OPTIONS)
    public ResponseEntity<?> loginVerifiedOptions() {
        log.info("üîß [OPTIONS] –ü–æ–ª—É—á–µ–Ω OPTIONS –∑–∞–ø—Ä–æ—Å –Ω–∞ login-verified");
        return ResponseEntity.ok().build();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞, –±–µ–∑ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞)
     */
    @GetMapping("/verification-status")
    public ResponseEntity<Map<String, Object>> getVerificationStatus(@RequestParam("code") String verificationCode) {
        try {
            log.info("üîç [VERIFICATION STATUS] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É: {}", verificationCode);
            
            if (verificationCode == null || verificationCode.isBlank()) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("success", false);
                errorResponse.put("message", "Verification code is required");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            }
            
            // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
            Optional<User> userOptional = authService.findUserByVerificationCode(verificationCode);
            
            Map<String, Object> response = new HashMap<>();
            
            if (userOptional.isEmpty()) {
                log.warn("‚ùå [VERIFICATION STATUS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∫–æ–¥–æ–º {} –Ω–µ –Ω–∞–π–¥–µ–Ω", verificationCode);
                response.put("success", false);
                response.put("found", false);
                response.put("message", "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
            }
            
            User user = userOptional.get();
            
            response.put("success", true);
            response.put("found", true);
            response.put("verified", user.isVerified());
            response.put("username", user.getUsername());
            
            if (user.isVerified()) {
                response.put("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–ª–æ–≥–∏–Ω—É");
                response.put("canLogin", true);
            } else {
                response.put("message", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—â–µ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ Telegram");
                response.put("canLogin", false);
            }
            
            log.info("‚úÖ [VERIFICATION STATUS] –°—Ç–∞—Ç—É—Å –¥–ª—è {}: verified={}", user.getUsername(), user.isVerified());
            return ResponseEntity.ok(response);
            
        } catch (Exception e) {
            log.error("üî• [VERIFICATION STATUS ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {}", e.getMessage(), e);
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "An error occurred during status check");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /verification-status (GET) + /login-verified (POST)
     * –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     */
    @PostMapping("/check-verification")
    public ResponseEntity<Map<String, Object>> checkVerificationDeprecated(@RequestBody Map<String, String> request) {
        log.warn("‚ö†Ô∏è [DEPRECATED] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç /check-verification. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /verification-status + /login-verified");
        return loginVerified(request);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–ª–æ–≥–∏–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    @PostMapping("/login-verified")
    public ResponseEntity<Map<String, Object>> loginVerified(@RequestBody Map<String, String> request) {
        try {
            String verificationCode = request.get("verificationCode");
            
            if (verificationCode == null || verificationCode.isBlank()) {
                Map<String, Object> errorResponse = new HashMap<>();
                errorResponse.put("success", false);
                errorResponse.put("message", "Verification code is required");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errorResponse);
            }
            
            log.info("üîç [CHECK VERIFICATION] –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É: {}", verificationCode);
            
            LoginCommandResult result = authService.checkVerificationAndLogin(verificationCode);
            Map<String, Object> response = new HashMap<>();
            
            if (!result.isSuccess()) {
                log.warn("‚ùå [CHECK VERIFICATION] –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {}", verificationCode);
                response.put("success", false);
                response.put("message", result.getMessage());
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
            }
            
            if (result.isNeedsVerification()) {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—â–µ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
                log.info("‚è≥ [CHECK VERIFICATION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –Ω–æ –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: –∫–æ–¥ {}", verificationCode);
                response.put("success", true);
                response.put("verified", false);
                response.put("message", result.getMessage());
                response.put("verificationCode", result.getVerificationCode());
                return ResponseEntity.ok(response);
            } else {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                log.info("‚úÖ [CHECK VERIFICATION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –≤—ã–¥–∞–µ–º —Ç–æ–∫–µ–Ω—ã: {}", result.getUser().getUsername());
                response.put("success", true);
                response.put("verified", true);
                response.put("message", result.getMessage());
                response.put("accessToken", result.getAccessToken());
                response.put("refreshToken", result.getRefreshToken());
                response.put("username", result.getUser().getUsername());
                
                return ResponseEntity.ok()
                        .header(HttpHeaders.AUTHORIZATION, "Bearer " + result.getAccessToken())
                        .body(response);
            }
        } catch (Exception e) {
            log.error("üî• [CHECK VERIFICATION ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {}", e.getMessage(), e);
            
            Map<String, Object> errorResponse = new HashMap<>();
            errorResponse.put("success", false);
            errorResponse.put("message", "An error occurred during verification check");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
     */
    @GetMapping("/validate-token")
    public ResponseEntity<Map<String, Object>> validateToken(@RequestHeader(HttpHeaders.AUTHORIZATION) String authHeader) {
        log.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–∞");
        Map<String, Object> response = new HashMap<>();

        try {
            if (authHeader == null || !authHeader.startsWith("Bearer ")) {
                response.put("valid", false);
                response.put("message", "No token provided or invalid format");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }

            String token = authHeader.substring(7); // –£–±–∏—Ä–∞–µ–º 'Bearer ' –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            ValidateTokenResult result = authService.validateToken(token);

            response.put("valid", result.isValid());
            response.put("username", result.getUsername());
            
            if (result.isValid()) {
                return ResponseEntity.ok(response);
            } else {
                response.put("message", "Invalid or expired token");
                return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {}", e.getMessage(), e);
            
            response.put("valid", false);
            response.put("message", "Error validating token: " + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
        }
    }
} 