package com.brand.backend.TelegramBot;

import com.brand.backend.models.Product;
import com.brand.backend.repositories.ProductRepository;
import com.brand.backend.repositories.UserRepository;
import com.brand.backend.models.User;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@RequiredArgsConstructor
@Service
public class TelegramBotService extends TelegramLongPollingBot {

    private final UserRepository userRepository;
    private final ProductRepository productRepository;

    @Override
    public String getBotUsername() {
        return "@obl1vium_bot"; // –í–∞—à–µ –∏–º—è –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return "7966511776:AAH5rqOuMVme5-irMuHKOk2Od88s97oGCJc"; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleIncomingMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery().getData(), update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        }
    }

    private final Map<Long, String> userStates = new HashMap<>();

    private void handleIncomingMessage(Message message) {
        String chatId = String.valueOf(message.getChatId());
        String text = message.getText();

        if (userStates.containsKey(message.getChatId()) && userStates.get(message.getChatId()).equals("linkTelegram")) {
            linkTelegram(message); // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
            return;
        }

        switch (text) {
            case "/start":
                sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", getMainMenuButtons());
                break;
            case "/help":
                sendMessage(chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                        "/buy - –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É\n" +
                        "/buyDesktop - –ö—É–ø–∏—Ç—å desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                        "/linkTelegram - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram-–∞–∫–∫–∞—É–Ω—Ç\n" +
                        "/linkDiscord - –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord-–∞–∫–∫–∞—É–Ω—Ç (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)");
                break;
            case "/buy":
                showProductPage(chatId, 0);
                break;
            case "/buyDesktop":
                sendMessage(chatId, "üíª –ù–∞—à–µ desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.");
                break;
            case "/linkTelegram":
                userStates.put(message.getChatId(), "linkTelegram"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞.");
                break;
            default:
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void linkTelegram(Message message) {
        String chatId = String.valueOf(message.getChatId());
        String text = message.getText();

        Optional<User> userOptional = userRepository.findByVerificationCode(text);

        if (userOptional.isPresent()) {
            User user = userOptional.get();

            Optional<User> existingUser = userRepository.findByTelegramId(message.getChatId());
            if (existingUser.isPresent() && !existingUser.get().equals(user)) {
                String censoredUsername = TelegramMiscMetods.censorUsername(existingUser.get().getUsername());
                sendMessage(chatId, "–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + censoredUsername);
                return;
            }

            user.setTelegramId(message.getChatId());
            user.setVerified(true);
            userRepository.save(user);
            sendMessage(chatId, "–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å!!!");
        } else {
            sendMessage(chatId, "–ö–æ–¥ –Ω–µ –≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
        userStates.remove(message.getChatId());
    }

    private void handleCallback(String data, Long chatId, Integer messageId) {
        System.out.println("–ü–æ–ª—É—á–µ–Ω callback: " + data);
        userStates.remove(chatId);

        try {
            if (data.startsWith("page_")) {
                int pageIndex = Integer.parseInt(data.split("_")[1]);
                editProductPage(chatId, messageId, pageIndex);

            } else if (data.startsWith("size_")) {
                String[] parts = data.split("_");
                Long productId = Long.parseLong(parts[1]);
                String size = parts[2];
                sendMessage(String.valueOf(chatId), "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä: " + size + ". –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±—É–¥—É—â–µ–º.");

            } else {
                switch (data) {
                    case "action_buy":
                        showProductPage(String.valueOf(chatId), 0);
                        break;

                    case "action_buyDesktop":
                        sendMessage(String.valueOf(chatId), "üíª –ù–∞—à–µ desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.");
                        break;

                    case "action_linkTelegram":
                        userStates.put(chatId, "linkTelegram"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
                        sendMessage(String.valueOf(chatId), "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞.");
                        break;

                    case "action_linkDiscord":
                        sendMessage(String.valueOf(chatId), "üîó –ü—Ä–∏–≤—è–∑–∫–∞ Discord-–∞–∫–∫–∞—É–Ω—Ç–∞ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞.");
                        break;

                    default:
                        sendMessage(String.valueOf(chatId), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                        break;
                }
            }
        } catch (NumberFormatException e) {
            sendMessage(String.valueOf(chatId), "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            e.printStackTrace();
        } catch (Exception e) {
            sendMessage(String.valueOf(chatId), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            e.printStackTrace();
        }
    }




    private void showProductPage(String chatId, int pageIndex) {
        List<Product> products = productRepository.findAll();
        if (products.isEmpty()) {
            sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
            return;
        }

        Product product = products.get(pageIndex);
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üëï " + product.getName() + "\nüíµ –¶–µ–Ω–∞: " + product.getPrice() + " RUB");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (pageIndex > 0) {
            rows.add(List.of(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "page_" + (pageIndex - 1))));
        }

        List<InlineKeyboardButton> sizeButtons = new ArrayList<>();
        for (String size : product.getSizes()) {
            sizeButtons.add(createButton(size, "size_" + product.getId() + "_" + size));
        }
        rows.add(sizeButtons);

        if (pageIndex < products.size() - 1) {
            rows.add(List.of(createButton("‚û°Ô∏è –î–∞–ª–µ–µ", "page_" + (pageIndex + 1))));
        }

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }


    private void editProductPage(Long chatId, Integer messageId, int pageIndex) {
        List<Product> products = productRepository.findAll();
        if (products.isEmpty()) {
            return;
        }

        Product product = products.get(pageIndex);
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId);
        message.setMessageId(messageId);
        message.setText("üëï " + product.getName() + "\nüíµ –¶–µ–Ω–∞: " + product.getPrice() + " USD");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (pageIndex > 0) {
            rows.add(List.of(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "page_" + (pageIndex - 1))));
        }

        List<InlineKeyboardButton> sizeButtons = new ArrayList<>();
        for (String size : product.getSizes()) {
            sizeButtons.add(createButton(size, "size_" + product.getId() + "_" + size));
        }
        rows.add(sizeButtons);

        if (pageIndex < products.size() - 1) {
            rows.add(List.of(createButton("‚û°Ô∏è –î–∞–ª–µ–µ", "page_" + (pageIndex + 1))));
        }

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(String chatId, String text, InlineKeyboardMarkup markup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardMarkup getMainMenuButtons() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(createButton("üõí –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É", "action_buy")));
        rows.add(List.of(createButton("üíª –ö—É–ø–∏—Ç—å desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "action_buyDesktop")));
        rows.add(List.of(createButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram", "action_linkTelegram")));
        rows.add(List.of(createButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord", "action_linkDiscord")));

        markup.setKeyboard(rows);
        return markup;
    }

}
