package com.brand.backend.infrastructure.integration.telegram.admin.handlers;

import com.brand.backend.infrastructure.integration.telegram.admin.service.AdminBotService;
import com.brand.backend.domain.order.model.Order;
import com.brand.backend.domain.user.model.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */
@Component
@Slf4j
@RequiredArgsConstructor
public class UserHandler {

    private final AdminBotService adminBotService;
    private static final DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public SendMessage handleUserList(String chatId) {
        List<User> users = adminBotService.getAllUsers();
        
        if (users.isEmpty()) {
            return createMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }
        
        StringBuilder message = new StringBuilder("*üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n");
        
        for (int i = 0; i < Math.min(20, users.size()); i++) {
            User user = users.get(i);
            message.append(i + 1).append(". *").append(user.getUsername()).append("*");
            
            if (user.getEmail() != null) {
                message.append(" (").append(user.getEmail()).append(")");
            }
            
            message.append("\n");
            
            List<Order> userOrders = adminBotService.getOrdersByUser(user);
            message.append("üìù –ó–∞–∫–∞–∑–æ–≤: ").append(userOrders.size()).append("\n");
            
            if (user.getTelegramUsername() != null) {
                message.append("üîó Telegram: @").append(user.getTelegramUsername()).append("\n");
            }
            
            message.append("/user_").append(user.getId()).append(" - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n");
        }
        
        if (users.size() > 20) {
            message.append("...–∏ –µ—â–µ ").append(users.size() - 20).append(" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n");
            message.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }
        
        return createMessage(chatId, message.toString(), createUserListKeyboard());
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    public SendMessage handleUserDetails(String chatId, Long userId) {
        User user = adminBotService.getUserById(userId);
        
        if (user == null) {
            return createMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
        
        StringBuilder message = new StringBuilder("*üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ").append(user.getUsername()).append("*\n\n");
        
        message.append("*ID:* ").append(user.getId()).append("\n");
        message.append("*–†–æ–ª—å:* ").append(user.getRole()).append("\n");
        message.append("*Email:* ").append(user.getEmail() != null ? user.getEmail() : "-").append("\n");
        message.append("*–¢–µ–ª–µ—Ñ–æ–Ω:* ").append(user.getPhoneNumber() != null ? user.getPhoneNumber() : "-").append("\n\n");
        
        message.append("*–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏:*\n");
        message.append("*Telegram ID:* ").append(user.getTelegramId() != null ? user.getTelegramId() : "-").append("\n");
        message.append("*Telegram:* ").append(user.getTelegramUsername() != null ? "@" + user.getTelegramUsername() : "-").append("\n");
        message.append("*Discord:* ").append(user.getDiscordUsername() != null ? user.getDiscordUsername() : "-").append("\n");
        message.append("*VK:* ").append(user.getVkUsername() != null ? user.getVkUsername() : "-").append("\n\n");
        
        message.append("*–°—Ç–∞—Ç—É—Å:*\n");
        message.append("*–ê–∫—Ç–∏–≤–µ–Ω:* ").append(user.isActive() ? "‚úÖ" : "‚ùå").append("\n");
        message.append("*–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω:* ").append(user.isVerified() ? "‚úÖ" : "‚ùå").append("\n");
        message.append("*Discord –ø—Ä–∏–≤—è–∑–∞–Ω:* ").append(user.isLinkedDiscord() ? "‚úÖ" : "‚ùå").append("\n");
        message.append("*VK –ø—Ä–∏–≤—è–∑–∞–Ω:* ").append(user.isLinkedVkontakte() ? "‚úÖ" : "‚ùå").append("\n\n");
        
        message.append("*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* ").append(user.getCreatedAt().format(DATETIME_FORMATTER)).append("\n");
        
        if (user.getLastLogin() != null) {
            message.append("*–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:* ").append(user.getLastLogin().format(DATETIME_FORMATTER)).append("\n");
        }
        
        return createMessage(chatId, message.toString(), createUserDetailsKeyboard(user));
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public SendMessage handleUserSearch(String chatId, String query) {
        List<User> users = adminBotService.getAllUsers();
        
        List<User> filteredUsers = users.stream()
                .filter(user -> matchesUser(user, query))
                .toList();
        
        if (filteredUsers.isEmpty()) {
            return createMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", false);
        }
        
        StringBuilder message = new StringBuilder("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n");
        
        for (int i = 0; i < filteredUsers.size(); i++) {
            User user = filteredUsers.get(i);
            message.append(i + 1).append(". ").append(user.getUsername());
            
            if (user.getEmail() != null) {
                message.append(" (").append(user.getEmail()).append(")");
            }
            
            message.append("\n");
            
            if (user.getTelegramUsername() != null) {
                message.append("üîó Telegram: @").append(user.getTelegramUsername()).append("\n");
            }
            
            message.append("/user_").append(user.getId()).append(" - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n");
        }
        
        return createMessage(chatId, message.toString(), false);
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    private InlineKeyboardMarkup createUserListKeyboard() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "searchUser"));
        rows.add(row1);
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        return markup;
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
     */
    private InlineKeyboardMarkup createUserDetailsKeyboard(User user) {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üìù –ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "userOrders:" + user.getId()));
        rows.add(row1);
        
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üé® NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "userNFTs:" + user.getId()));
        rows.add(row2);
        
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        if (user.isActive()) {
            row3.add(createButton("‚ùå –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", "user:deactivate:" + user.getId()));
        } else {
            row3.add(createButton("‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å", "user:activate:" + user.getId()));
        }
        rows.add(row3);
        
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", "menu:users"));
        rows.add(row4);
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        return markup;
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
     */
    private boolean matchesUser(User user, String query) {
        query = query.toLowerCase();
        
        return (user.getUsername() != null && user.getUsername().toLowerCase().contains(query)) ||
               (user.getEmail() != null && user.getEmail().toLowerCase().contains(query)) ||
               (user.getPhoneNumber() != null && user.getPhoneNumber().contains(query)) ||
               (user.getTelegramUsername() != null && user.getTelegramUsername().toLowerCase().contains(query));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public SendMessage handleUserSearchRequest(String chatId) {
        String text = """
                *üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*
                
                –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.
                
                –ù–∞–ø—Ä–∏–º–µ—Ä: /user_search –ò–≤–∞–Ω
                –ò–ª–∏: /user_search example@mail.com
                –ò–ª–∏: /user_search +79123456789
                """;
        
        return createMessage(chatId, text);
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private SendMessage createMessage(String chatId, String text) {
        return createMessage(chatId, text, true);
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private SendMessage createMessage(String chatId, String text, boolean useMarkdown) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        if (useMarkdown) {
            message.setParseMode("Markdown");
        }
        return message;
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    private SendMessage createMessage(String chatId, String text, org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard keyboard) {
        return createMessage(chatId, text, keyboard, true);
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞—Ç—å —Ä–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private SendMessage createMessage(String chatId, String text, org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard keyboard, boolean useMarkdown) {
        SendMessage message = createMessage(chatId, text, useMarkdown);
        message.setReplyMarkup(keyboard);
        return message;
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ callback-–¥–∞–Ω–Ω—ã–º–∏
     */
    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è)
     */
    public SendMessage handleToggleUserStatus(String chatId, Long userId, Integer messageId) {
        User user = adminBotService.getUserById(userId);
        
        if (user == null) {
            return createMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
        
        // –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        boolean newStatus = !user.isActive();
        adminBotService.updateUserActiveStatus(userId, newStatus);
        
        String statusText = newStatus ? "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ" : "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚ùå";
        String message = "*üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + user.getUsername() + " " + statusText + "*\n\n" +
                "–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.";
        
        return createMessage(chatId, message, createUserDetailsKeyboard(user));
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    public SendMessage handleSearchUserForm(String chatId) {
        String text = """
                üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                
                –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /user_search –∏–ª–∏ /usersearch –∏ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                
                –ù–∞–ø—Ä–∏–º–µ—Ä: 
                /user_search –ò–≤–∞–Ω
                /usersearch example@mail.com
                /user_search +79123456789
                """;
        
        return createMessage(chatId, text, false);
    }
} 