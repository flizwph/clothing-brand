package com.brand.backend.infrastructure.integration.telegram.user.service;

import com.brand.backend.domain.product.model.Product;
import com.brand.backend.domain.product.repository.ProductRepository;
import com.brand.backend.domain.user.repository.UserRepository;
import com.brand.backend.domain.user.model.User;
import com.brand.backend.infrastructure.integration.telegram.user.util.TelegramMiscMetods;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import com.brand.backend.application.user.service.VerificationService;
import com.brand.backend.domain.subscription.model.Subscription;
import com.brand.backend.application.subscription.service.SubscriptionService;

import java.util.*;
import java.util.stream.Collectors;
import java.util.concurrent.ConcurrentHashMap;
import java.time.LocalDateTime;

@Slf4j
@Service
public class TelegramBotService extends TelegramLongPollingBot {

    private final UserRepository userRepository;
    private final ProductRepository productRepository;
    private final VerificationService verificationService;
    private final TelegramProductService telegramProductService;
    private final SubscriptionService subscriptionService;
    
    @org.springframework.beans.factory.annotation.Autowired
    public TelegramBotService(UserRepository userRepository, 
                              ProductRepository productRepository, 
                              VerificationService verificationService,
                              TelegramProductService telegramProductService,
                              SubscriptionService subscriptionService) {
        this.userRepository = userRepository;
        this.productRepository = productRepository;
        this.verificationService = verificationService;
        this.telegramProductService = telegramProductService;
        this.subscriptionService = subscriptionService;
    }
    
    protected TelegramBotService(UserRepository userRepository, 
                               ProductRepository productRepository,
                               VerificationService verificationService, 
                               TelegramProductService telegramProductService,
                               SubscriptionService subscriptionService,
                               boolean dummy) {
        this.userRepository = userRepository;
        this.productRepository = productRepository;
        this.verificationService = verificationService;
        this.telegramProductService = telegramProductService;
        this.subscriptionService = subscriptionService;
    }

    @Override
    public String getBotUsername() {
        return "@obl1vium_bot"; // –í–∞—à–µ –∏–º—è –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return "7966511776:AAH5rqOuMVme5-irMuHKOk2Od88s97oGCJc"; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleIncomingMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery().getData(), update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        }
    }

    private final Map<Long, String> userStates = new HashMap<>();
    private final Map<Long, Long> lastActivatedSubscriptions = new ConcurrentHashMap<>();

    private void handleIncomingMessage(Message message) {
        String chatId = String.valueOf(message.getChatId());
        String text = message.getText();

        if (userStates.containsKey(message.getChatId()) && userStates.get(message.getChatId()).equals("linkTelegram")) {
            linkTelegram(message); // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
            return;
        }
        
        if (userStates.containsKey(message.getChatId()) && userStates.get(message.getChatId()).equals("linkDiscord")) {
            linkDiscord(message); // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ Discord
            return;
        }
        
        if (userStates.containsKey(message.getChatId()) && userStates.get(message.getChatId()).equals("waitingForActivationCode")) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            handleActivationCode(message);
            return;
        }

        switch (text) {
            case "/start":
                sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", getMainMenuButtons());
                break;
            case "/help":
                String helpMessage = """
                        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                        
                        /buy - –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É
                        /cart - –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫
                        /linkTelegram - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç
                        /linkDiscord - –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord –∞–∫–∫–∞—É–Ω—Ç
                        /help - –ü–æ–º–æ—â—å
                        
                        –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
                        """;
                sendMessage(chatId, helpMessage);
                break;
            case "/buy":
                showShopCategories(chatId);
                break;
            case "/cart":
                // –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
                // (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ CartCommand)
                sendMessage(chatId, "üõí –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ...");
                break;
            case "/buyDesktop":
                showDesktopAppCategory(chatId);
                break;
            case "/subscription":
                // –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–¥–ø–∏—Å–æ–∫
                handleSubscriptionCommand(message);
                break;
            case "/linkTelegram":
                userStates.put(message.getChatId(), "linkTelegram"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                String message1 = """
                        üîó *–ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞*
                        
                        –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
                        1. –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞
                        2. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
                        3. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram"
                        4. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–¥
                        5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ —Å—é–¥–∞
                        
                        ‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
                        """;
                sendMessage(chatId, message1);
                break;
            case "/linkDiscord":
                handleLinkDiscordCommand(chatId);
                break;
            default:
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void handleCallback(String data, Long chatId, Integer messageId) {
        String stringChatId = chatId.toString();
        
        if (data.equals("shop_categories")) {
            showShopCategories(stringChatId);
        } else if (data.equals("shop_category_clothes")) {
            showClothesCategory(stringChatId);
        } else if (data.equals("shop_category_accessories")) {
            showAccessoriesCategory(stringChatId);
        } else if (data.equals("shop_category_desktop")) {
            showDesktopAppCategory(stringChatId);
        } else if (data.equals("coming_soon")) {
            showComingSoon(stringChatId);
        } else if (data.startsWith("desktop_")) {
            handleDesktopCallback(data, stringChatId);
        } else if (data.equals("shop")) {
            showProductPage(stringChatId, 0);
        } else if (data.equals("help")) {
            sendMessage(stringChatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "/buy - –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É\n" +
                    "/buyDesktop - –ö—É–ø–∏—Ç—å desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                    "/linkTelegram - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram-–∞–∫–∫–∞—É–Ω—Ç\n" +
                    "/linkDiscord - –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord-–∞–∫–∫–∞—É–Ω—Ç");
        } else if (data.equals("main_menu")) {
            sendMessage(stringChatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", getMainMenuButtons());
        } else if (data.equals("startLinkTelegram")) {
            userStates.put(chatId, "linkTelegram");
            sendMessage(stringChatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞.");
        } else if (data.equals("startLinkDiscord")) {
            handleLinkDiscordCommand(stringChatId);
        } else if (data.startsWith("page_")) {
            int pageIndex = Integer.parseInt(data.substring(5));
            editProductPage(chatId, messageId, pageIndex);
        } else if (data.startsWith("size_")) {
            String[] parts = data.split("_");
            Long productId = Long.parseLong(parts[1]);
            String size = parts[2];
            handleProductSelection(stringChatId, productId, size);
        } else if (data.equals("subscription_activate")) {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            userStates.put(chatId, "waitingForActivationCode");
            
            String message = """
                    üîë *–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏*
                    
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.
                    
                    –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —Å–≤–æ–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscription
                    """;
                    
            sendMessage(stringChatId, message);
        } else if (data.equals("subscription_settings")) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
            handleSubscriptionSettings(chatId);
        } else if (data.equals("download_app")) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            handleDownloadApp(chatId);
        } else if (data.equals("renew_subscription")) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            handleRenewSubscription(chatId);
        } else if (data.equals("subscription_command")) {
            // –≠–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /subscription
            Message fakeMessage = new Message();
            // –ù–µ–ª—å–∑—è –Ω–∞–ø—Ä—è–º—É—é —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å chatId –≤ Message, —Å–æ–∑–¥–∞–¥–∏–º –æ–±—ä–µ–∫—Ç Chat
            org.telegram.telegrambots.meta.api.objects.Chat chat = new org.telegram.telegrambots.meta.api.objects.Chat();
            chat.setId(chatId);
            fakeMessage.setChat(chat);
            fakeMessage.setText("/subscription");
            handleIncomingMessage(fakeMessage);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
     * 
     * @param data –¥–∞–Ω–Ω—ã–µ callback
     * @param chatId ID —á–∞—Ç–∞
     */
    private void handleDesktopCallback(String data, String chatId) {
        if (data.equals("desktop_basic")) {
            showDesktopPlan(chatId, "basic");
        } else if (data.equals("desktop_standard")) {
            showDesktopPlan(chatId, "standard");
        } else if (data.equals("desktop_premium")) {
            showDesktopPlan(chatId, "premium");
        } else if (data.startsWith("desktop_buy_")) {
            // –ü—Ä–∏–º–µ—Ä: desktop_buy_basic_1
            String[] parts = data.split("_");
            if (parts.length >= 4) {
                String plan = parts[2];
                int duration = Integer.parseInt(parts[3]);
                handleDesktopSubscriptionPurchase(chatId, plan, duration);
            }
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @param plan —Ç–∏–ø –ø–ª–∞–Ω–∞
     * @param duration –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –º–µ—Å—è—Ü–∞—Ö
     */
    private void handleDesktopSubscriptionPurchase(String chatId, String plan, int duration) {
        String planName;
        int pricePerMonth;
        
        switch (plan) {
            case "basic":
                planName = "–ë–∞–∑–æ–≤—ã–π";
                pricePerMonth = 99;
                break;
            case "standard":
                planName = "–°—Ç–∞–Ω–¥–∞—Ä—Ç";
                pricePerMonth = 199;
                break;
            case "premium":
                planName = "–ü—Ä–µ–º–∏—É–º";
                pricePerMonth = 299;
                break;
            default:
                planName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
                pricePerMonth = 0;
                break;
        }
        
        double discount = 0;
        if (duration == 3) {
            discount = 0.1; // 10% —Å–∫–∏–¥–∫–∞
        } else if (duration == 12) {
            discount = 0.2; // 20% —Å–∫–∏–¥–∫–∞
        }
        
        double totalPrice = pricePerMonth * duration * (1 - discount);
        
        String message = String.format("""
                üõí *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*
                
                –ü–ª–∞–Ω: %s
                –°—Ä–æ–∫: %d –º–µ—Å—è—Ü%s
                –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: %d‚ÇΩ
                –°–∫–∏–¥–∫–∞: %.0f%%
                
                *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: %.0f‚ÇΩ*
                
                –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!
                """, 
                planName, 
                duration, 
                duration == 1 ? "" : (duration < 5 ? "–∞" : "–µ–≤"), 
                pricePerMonth,
                discount * 100,
                totalPrice);
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", "shop_category_desktop")));
        rows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        sendMessage(chatId, message, markup);
    }

    public void handleLinkDiscordCommand(String chatId) {
        Long telegramId = Long.parseLong(chatId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
        Optional<User> userOptional = userRepository.findByTelegramId(telegramId);
        
        if (userOptional.isEmpty()) {
            sendMessage(chatId, "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–∞–π—Ç–µ.");
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord
        String verificationCode = verificationService.generateAndSaveVerificationCodeByTelegramId(telegramId);
        if (verificationCode == null) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        StringBuilder instructions = new StringBuilder();
        instructions.append("üì± *–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å Discord –∞–∫–∫–∞—É–Ω—Ç:*\n\n");
        instructions.append("1. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Discord: https://discord.gg/our-bot\n");
        instructions.append("2. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É `!link ").append(verificationCode).append("`\n");
        instructions.append("3. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É `!link`, –∞ –∑–∞—Ç–µ–º –∫–æ–¥ `").append(verificationCode).append("`\n\n");
        instructions.append("‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.");
        
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(instructions.toString());
        sendMessage.enableMarkdown(true);
        
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    
    public void showProductPage(String chatId, int pageIndex) {
        List<Product> products = productRepository.findAll();
        if (products.isEmpty()) {
            sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pageIndex –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if (pageIndex < 0 || pageIndex >= products.size()) {
            // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            pageIndex = 0;
        }

        Product product = products.get(pageIndex);
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üëï " + product.getName() + "\nüíµ –¶–µ–Ω–∞: " + product.getPrice() + " RUB");
        message.enableMarkdown(true); // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–º–µ—Ç–∫–∏

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (pageIndex > 0) {
            rows.add(List.of(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "page_" + (pageIndex - 1))));
        }

        List<InlineKeyboardButton> sizeButtons = new ArrayList<>();
        for (String size : product.getSizes()) {
            sizeButtons.add(createButton(size, "size_" + product.getId() + "_" + size));
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã
        if (!sizeButtons.isEmpty()) {
            rows.add(sizeButtons);
        }

        if (pageIndex < products.size() - 1) {
            rows.add(List.of(createButton("‚û°Ô∏è –î–∞–ª–µ–µ", "page_" + (pageIndex + 1))));
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "shop_categories")));

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∞: ", e);
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    public void editProductPage(Long chatId, Integer messageId, int pageIndex) {
        List<Product> products = productRepository.findAll();
        if (products.isEmpty()) {
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ pageIndex –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
        if (pageIndex < 0 || pageIndex >= products.size()) {
            // –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            pageIndex = 0;
        }

        Product product = products.get(pageIndex);
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId);
        message.setMessageId(messageId);
        message.setText("üëï " + product.getName() + "\nüíµ –¶–µ–Ω–∞: " + product.getPrice() + " USD");
        message.enableMarkdown(true);  // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–º–µ—Ç–∫–∏

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (pageIndex > 0) {
            rows.add(List.of(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "page_" + (pageIndex - 1))));
        }

        List<InlineKeyboardButton> sizeButtons = new ArrayList<>();
        for (String size : product.getSizes()) {
            sizeButtons.add(createButton(size, "size_" + product.getId() + "_" + size));
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã
        if (!sizeButtons.isEmpty()) {
            rows.add(sizeButtons);
        }

        if (pageIndex < products.size() - 1) {
            rows.add(List.of(createButton("‚û°Ô∏è –î–∞–ª–µ–µ", "page_" + (pageIndex + 1))));
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "shop_categories")));

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ–¥—É–∫—Ç–∞: ", e);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            sendMessage(chatId.toString(), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    public void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public void sendMessage(String chatId, String text, InlineKeyboardMarkup markup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
     * 
     * @return –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
     */
    public InlineKeyboardMarkup getMainMenuButtons() {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫: –º–∞–≥–∞–∑–∏–Ω –∏ –∫–æ—Ä–∑–∏–Ω–∞
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω", "shop_categories"));
        row1.add(createButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", "view_cart"));
        rows.add(row1);
        
        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫: –ø—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram", "startLinkTelegram"));
        row2.add(createButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord", "startLinkDiscord"));
        rows.add(row2);
        
        // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫: –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createButton("üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏", "subscription_activate"));
        rows.add(row3);
        
        // –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫: –ø–æ–º–æ—â—å
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createButton("‚ùì –ü–æ–º–æ—â—å", "help"));
        rows.add(row4);
        
        markup.setKeyboard(rows);
        return markup;
    }

    private void handleProductSelection(String chatId, Long productId, String size) {
        Product product = telegramProductService.getProductById(productId);
        if (product != null) {
            String message = "–í—ã –≤—ã–±—Ä–∞–ª–∏: " + product.getName() + "\n" +
                    "–†–∞–∑–º–µ—Ä: " + size + "\n" +
                    "–¶–µ–Ω–∞: " + product.getPrice() + " USD\n\n" +
                    "–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±—É–¥—É—â–µ–º.";
            
            sendMessage(chatId, message);
        } else {
            sendMessage(chatId, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.");
        }
    }

    public void linkTelegram(Message message) {
        String chatId = String.valueOf(message.getChatId());
        String text = message.getText();

        User user = verificationService.verifyCode(text);
        if (user != null) {
            Optional<User> existingUser = userRepository.findByTelegramId(message.getChatId());
            if (existingUser.isPresent() && !existingUser.get().equals(user)) {
                String censoredUsername = TelegramMiscMetods.censorUsername(existingUser.get().getUsername());
                sendMessage(chatId, "–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + censoredUsername);
                return;
            }

            user.setTelegramId(message.getChatId());
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ã—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram_username)
            String telegramUsername = message.getFrom().getUserName();
            if (telegramUsername != null && !telegramUsername.isBlank()) {
                user.setTelegramUsername(telegramUsername);
            }
            user.setVerified(true);
            userRepository.save(user);
            sendMessage(chatId, "–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å!!!");
        } else {
            sendMessage(chatId, "–ö–æ–¥ –Ω–µ –≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
        userStates.remove(message.getChatId());
    }

    public void linkDiscord(Message message) {
        // –ú—ã –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –∑–¥–µ—Å—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é Discord —á–µ—Ä–µ–∑ Telegram –±–æ—Ç,
        // —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∞–º Discord-–∫–ª–∏–µ–Ω—Ç
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ Discord –±–æ—Ç–µ
        String chatId = String.valueOf(message.getChatId());
        sendMessage(chatId, "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /linkDiscord –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.");
        userStates.remove(message.getChatId());
    }

    public void searchUser(String chatId, String username) {
        // –ò–∑–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–º–µ—é—â–∏—Ö—Å—è –º–µ—Ç–æ–¥–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
        List<User> users = userRepository.findAll().stream()
                .filter(user -> user.getUsername() != null && 
                        user.getUsername().toLowerCase().contains(username.toLowerCase()))
                .collect(Collectors.toList());
        
        if (users.isEmpty()) {
            sendMessage(chatId, "üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
            return;
        }
        
        StringBuilder messageText = new StringBuilder("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n");
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        for (User user : users) {
            String userInfo = user.getUsername() + (user.isVerified() ? " ‚úÖ" : " ‚ùå");
            messageText.append("üë§ ").append(userInfo).append("\n");
            
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(createButton("üë§ " + user.getUsername(), "user_details_" + user.getId()));
            rows.add(row);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createButton("üîô –ù–∞–∑–∞–¥", "main_menu"));
        rows.add(backRow);
        
        markup.setKeyboard(rows);
        sendMessage(chatId, messageText.toString(), markup);
    }

    public void showUserDetails(String chatId, Long userId) {
        Optional<User> userOpt = userRepository.findById(userId);
        
        if (userOpt.isEmpty()) {
            sendMessage(chatId, "‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return;
        }
        
        User user = userOpt.get();
        StringBuilder messageText = new StringBuilder("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n");
        messageText.append("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ").append(user.getUsername()).append("\n");
        messageText.append("Email: ").append(user.getEmail()).append("\n");
        messageText.append("–°—Ç–∞—Ç—É—Å: ").append(user.isVerified() ? "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚úÖ" : "–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω ‚ùå").append("\n");
        
        if (user.getTelegramId() != null) {
            messageText.append("Telegram: –ü—Ä–∏–≤—è–∑–∞–Ω ‚úÖ\n");
        } else {
            messageText.append("Telegram: –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω ‚ùå\n");
        }
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø–æ–∏—Å–∫—É
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createButton("üîô –ù–∞–∑–∞–¥", "search_users"));
        rows.add(backRow);
        
        markup.setKeyboard(rows);
        sendMessage(chatId, messageText.toString(), markup);
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    public void showShopCategories(String chatId) {
        String message = """
                üõçÔ∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤*
                
                –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:
                """;
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        rows.add(List.of(createButton("üëï –û–¥–µ–∂–¥–∞", "shop_category_clothes")));
        rows.add(List.of(createButton("üß¢ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "shop_category_accessories")));
        rows.add(List.of(createButton("üíª Desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "shop_category_desktop")));
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        rows.add(List.of(createButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        sendMessage(chatId, message, markup);
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–¥–µ–∂–¥—ã
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    public void showClothesCategory(String chatId) {
        String message = """
                üëï *–û–¥–µ–∂–¥–∞*
                
                –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–¥–µ–∂–¥—ã:
                """;
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–¥–µ–∂–¥—ã
        rows.add(List.of(createButton("üëï –§—É—Ç–±–æ–ª–∫–∏", "shop")));
        rows.add(List.of(createButton("üëñ –®—Ç–∞–Ω—ã (–°–∫–æ—Ä–æ)", "coming_soon")));
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "shop_categories")));
        rows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        sendMessage(chatId, message, markup);
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    public void showAccessoriesCategory(String chatId) {
        String message = """
                üß¢ *–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã*
                
                –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
                
                –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
                """;
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "shop_categories")));
        rows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        sendMessage(chatId, message, markup);
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    public void showDesktopAppCategory(String chatId) {
        String message = """
                üíª *Desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ*
                
                –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ.
                –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:
                """;
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
        rows.add(List.of(createButton("ü•â –ë–∞–∑–æ–≤—ã–π (99‚ÇΩ/–º–µ—Å)", "desktop_basic")));
        rows.add(List.of(createButton("ü•à –°—Ç–∞–Ω–¥–∞—Ä—Ç (199‚ÇΩ/–º–µ—Å)", "desktop_standard")));
        rows.add(List.of(createButton("ü•á –ü—Ä–µ–º–∏—É–º (299‚ÇΩ/–º–µ—Å)", "desktop_premium")));
        
        // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        List<InlineKeyboardButton> durationRow = new ArrayList<>();
        durationRow.add(createButton("1 –º–µ—Å—è—Ü", "desktop_duration_1"));
        durationRow.add(createButton("3 –º–µ—Å—è—Ü–∞", "desktop_duration_3"));
        durationRow.add(createButton("12 –º–µ—Å—è—Ü–µ–≤", "desktop_duration_12"));
        rows.add(durationRow);
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "shop_categories")));
        rows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        sendMessage(chatId, message, markup);
    }
    
    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è"
     * 
     * @param chatId ID —á–∞—Ç–∞
     */
    public void showComingSoon(String chatId) {
        String message = """
                üîú *–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!*
                
                –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
                
                –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
                """;
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "shop_categories")));
        rows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        sendMessage(chatId, message, markup);
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏ desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * 
     * @param chatId ID —á–∞—Ç–∞
     * @param plan —Ç–∏–ø –ø–ª–∞–Ω–∞
     */
    public void showDesktopPlan(String chatId, String plan) {
        String planName;
        int pricePerMonth;
        String features;
        
        switch (plan) {
            case "basic":
                planName = "–ë–∞–∑–æ–≤—ã–π";
                pricePerMonth = 99;
                features = """
                        ‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
                        ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
                        ‚Ä¢ 1 –ø—Ä–æ–µ–∫—Ç
                        """;
                break;
            case "standard":
                planName = "–°—Ç–∞–Ω–¥–∞—Ä—Ç";
                pricePerMonth = 199;
                features = """
                        ‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
                        ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
                        ‚Ä¢ 5 –ø—Ä–æ–µ–∫—Ç–æ–≤
                        ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
                        """;
                break;
            case "premium":
                planName = "–ü—Ä–µ–º–∏—É–º";
                pricePerMonth = 299;
                features = """
                        ‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
                        ‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É
                        ‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
                        ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
                        ‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        """;
                break;
            default:
                planName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
                pricePerMonth = 0;
                features = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
        }
        
        String message = String.format("""
                üíª *–ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏: %s*
                
                –°—Ç–æ–∏–º–æ—Å—Ç—å: %d‚ÇΩ –≤ –º–µ—Å—è—Ü
                
                –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
                %s
                
                –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:
                """, planName, pricePerMonth, features);
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        List<InlineKeyboardButton> durationRow = new ArrayList<>();
        durationRow.add(createButton("1 –º–µ—Å—è—Ü", "desktop_buy_" + plan + "_1"));
        durationRow.add(createButton("3 –º–µ—Å—è—Ü–∞ (-10%)", "desktop_buy_" + plan + "_3"));
        durationRow.add(createButton("12 –º–µ—Å—è—Ü–µ–≤ (-20%)", "desktop_buy_" + plan + "_12"));
        rows.add(durationRow);
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", "shop_category_desktop")));
        rows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        sendMessage(chatId, message, markup);
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç API-–º–µ—Ç–æ–¥ Telegram –±–æ—Ç–∞
     * 
     * @param method API-–º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    public void executeMethod(BotApiMethod<?> method) {
        try {
            execute(method);
        } catch (TelegramApiException e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ API: ", e);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
     * 
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
     */
    private void handleActivationCode(Message message) {
        Long chatId = message.getChatId();
        String activationCode = message.getText();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π
        if (activationCode.startsWith("/")) {
            // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ –Ω–∞–ø—Ä—è–º—É—é
            switch (activationCode) {
                case "/start":
                    sendMessage(chatId.toString(), "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", getMainMenuButtons());
                    break;
                case "/help":
                    String helpMessage = """
                            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                            
                            /buy - –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É
                            /cart - –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫
                            /subscription - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
                            /activate - –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                            /linkTelegram - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç
                            /linkDiscord - –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord –∞–∫–∫–∞—É–Ω—Ç
                            /help - –ü–æ–º–æ—â—å
                            
                            –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
                            """;
                    sendMessage(chatId.toString(), helpMessage);
                    break;
                case "/buy":
                    showShopCategories(chatId.toString());
                    break;
                case "/cart":
                    sendMessage(chatId.toString(), "üõí –ü–µ—Ä–µ—Ö–æ–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ...");
                    break;
                case "/subscription":
                    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    userStates.remove(chatId);
                    handleSubscriptionCommand(message);
                    return;
                case "/activate":
                    // –î–ª—è –∫–æ–º–∞–Ω–¥—ã activate –Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ,
                    // —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    sendMessage(chatId.toString(), """
                            üîë *–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏*
                            
                            –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
                            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.
                            
                            –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫: `abc123xyz789`
                            """);
                    break;
                default:
                    sendMessage(chatId.toString(), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
            }
            return;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            Optional<User> userOpt = userRepository.findByTelegramId(chatId);
            if (userOpt.isEmpty()) {
                sendMessage(chatId.toString(), """
                        ‚ùå *–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!*
                        
                        –í–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                        –í—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–æ–º–∞–Ω–¥—É /linkTelegram –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.
                        """);
                userStates.remove(chatId);
                return;
            }
            
            User user = userOpt.get();
            log.info("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}, TelegramID: {}", user.getId(), user.getTelegramId());
            
            // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ –∫–æ–¥—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            Subscription subscription = null;
            try {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                subscription = subscriptionService.activateSubscription(activationCode);
                log.info("–ü–æ–¥–ø–∏—Å–∫–∞ ID: {} —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", subscription.getId());
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ", e);
                String errorMessage = String.format("""
                        ‚ùå *–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!*
                        
                        –ü—Ä–∏—á–∏–Ω–∞: %s
                        
                        üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
                        üîç –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞
                        """, e.getMessage());
                        
                sendMessage(chatId.toString(), errorMessage);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω–µ—Ç - –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º
            if (subscription.getUser() == null) {
                log.info("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ ID: {}", user.getId());
                subscription.setUser(user);
                subscription = subscriptionService.updateSubscription(subscription);
            } else if (!subscription.getUser().getId().equals(user.getId())) {
                log.info("–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {}), –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫ ID: {}", 
                    subscription.getUser().getId(), user.getId());
                subscription.setUser(user);
                subscription = subscriptionService.updateSubscription(subscription);
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            lastActivatedSubscriptions.put(chatId, subscription.getId());
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            String subscriptionLevel = switch (subscription.getSubscriptionLevel()) {
                case BASIC -> "–ë–∞–∑–æ–≤—ã–π";
                case STANDARD -> "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π";
                case PREMIUM -> "–ü—Ä–µ–º–∏—É–º";
            };
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            String endDate = subscription.getEndDate().format(java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm"));
            
            String successMessage = String.format("""
                    ‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*
                    
                    üî∞ –£—Ä–æ–≤–µ–Ω—å: *%s*
                    üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: *%s*
                    
                    üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:
                    """, subscriptionLevel, endDate);
            
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton downloadButton = new InlineKeyboardButton();
            downloadButton.setText("üíª –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ");
            downloadButton.setUrl("https://clothing-brand.com/app/download");
            row.add(downloadButton);
            keyboard.add(row);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            row1.add(createButton("üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "subscription_command"));
            keyboard.add(row1);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            List<InlineKeyboardButton> row2 = new ArrayList<>();
            row2.add(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"));
            keyboard.add(row2);
            
            markup.setKeyboard(keyboard);
            
            sendMessage(chatId.toString(), successMessage, markup);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userStates.remove(chatId);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∫–∞–∑–æ–º –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫
            try {
                Thread.sleep(1500);
                handleSubscriptionCommand(message);
            } catch (InterruptedException e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏: ", e);
            }
            
        } catch (Exception e) {
            log.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: ", e);
            String errorMessage = """
                    ‚ùå *–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏!*
                    
                    –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
                    """;
                    
            sendMessage(chatId.toString(), errorMessage);
            userStates.remove(chatId);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥–ø–∏—Å–æ–∫
     * 
     * @param message —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
     */
    private void handleSubscriptionCommand(Message message) {
        Long chatId = message.getChatId();
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Optional<User> userOpt = userRepository.findByTelegramId(chatId);
        
        if (userOpt.isEmpty()) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            sendMessage(chatId.toString(), """
                    ‚ùó *–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã*
                    
                    –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∑–∞—Ç—å –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç.
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /linkTelegram.
                    """);
            return;
        }
        
        User user = userOpt.get();
        log.info("–ü–æ–∏—Å–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {}, TelegramID: {}", user.getId(), user.getTelegramId());
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)
            List<Subscription> validSubscriptions = subscriptionService.getUserValidSubscriptions(user.getId());
            log.info("–ù–∞–π–¥–µ–Ω–æ {} –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫", validSubscriptions.size());
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
            if (validSubscriptions.isEmpty() && lastActivatedSubscriptions.containsKey(chatId)) {
                Long lastSubId = lastActivatedSubscriptions.get(chatId);
                log.info("–ù–∞–π–¥–µ–Ω–∞ –Ω–µ–¥–∞–≤–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å ID: {}, –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é", lastSubId);
                
                // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é
                Optional<Subscription> recentSub = subscriptionService.getSubscriptionById(lastSubId);
                if (recentSub.isPresent() && recentSub.get().isActive() && recentSub.get().getEndDate().isAfter(LocalDateTime.now())) {
                    validSubscriptions = List.of(recentSub.get());
                    log.info("–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é: {}", recentSub.get().getId());
                }
            }
            
            if (validSubscriptions.isEmpty()) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                List<Subscription> allSubscriptions = subscriptionService.getAllSubscriptions(user.getId());
                log.info("–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {} –ø–æ–¥–ø–∏—Å–æ–∫ (–≤–∫–ª—é—á–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ)", allSubscriptions.size());
                
                StringBuilder debugInfo = new StringBuilder();
                for (Subscription sub : allSubscriptions) {
                    debugInfo.append(String.format("ID: %d, –ê–∫—Ç–∏–≤–Ω–∞: %b, –ù–∞—á–∞–ª–æ: %s, –ö–æ–Ω–µ—Ü: %s\n", 
                        sub.getId(), sub.isActive(), sub.getStartDate(), sub.getEndDate()));
                }
                log.info("–î–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫: {}", debugInfo.toString());
                
                // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã
                List<Subscription> allActiveSubscriptions = subscriptionService.getUserActiveSubscriptions(user.getId());
                log.info("–ù–∞–π–¥–µ–Ω–æ {} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è)", allActiveSubscriptions.size());
                
                if (!allActiveSubscriptions.isEmpty()) {
                    // –ï—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ –æ–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã
                    String expiredText = """
                            üì± *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*
                            
                            –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ –∏—Ö —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç–µ–∫.
                            
                            –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤:
                            
                            üîπ *–ë–∞–∑–æ–≤—ã–π* - 99‚ÇΩ/–º–µ—Å—è—Ü
                            üî∏ *–°—Ç–∞–Ω–¥–∞—Ä—Ç* - 199‚ÇΩ/–º–µ—Å—è—Ü
                            üî∂ *–ü—Ä–µ–º–∏—É–º* - 299‚ÇΩ/–º–µ—Å—è—Ü
                            """;
                    
                    InlineKeyboardMarkup expiredMarkup = new InlineKeyboardMarkup();
                    List<List<InlineKeyboardButton>> expiredRows = new ArrayList<>();
                    
                    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                    expiredRows.add(List.of(createButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "renew_subscription")));
                    
                    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                    expiredRows.add(List.of(createButton("üí≥ –ö—É–ø–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É", "shop_category_desktop")));
                    
                    // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                    expiredRows.add(List.of(createButton("üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", "subscription_activate")));
                    
                    // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                    expiredRows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
                    
                    expiredMarkup.setKeyboard(expiredRows);
                    
                    sendMessage(chatId.toString(), expiredText, expiredMarkup);
                    return;
                }
                
                // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
                String subscriptionText = """
                        üì± *–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏*
                        
                        –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
                        
                        –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à–µ desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤:
                        
                        üîπ *–ë–∞–∑–æ–≤—ã–π* - 99‚ÇΩ/–º–µ—Å—è—Ü
                        üî∏ *–°—Ç–∞–Ω–¥–∞—Ä—Ç* - 199‚ÇΩ/–º–µ—Å—è—Ü
                        üî∂ *–ü—Ä–µ–º–∏—É–º* - 299‚ÇΩ/–º–µ—Å—è—Ü
                        
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π.
                        """;
                        
                // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                InlineKeyboardMarkup subscriptionMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> subscriptionRows = new ArrayList<>();
                
                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                subscriptionRows.add(List.of(createButton("üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "shop_category_desktop")));
                
                // –ö–Ω–æ–ø–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                subscriptionRows.add(List.of(createButton("üîë –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", "subscription_activate")));
                
                // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                subscriptionRows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
                
                subscriptionMarkup.setKeyboard(subscriptionRows);
                
                sendMessage(chatId.toString(), subscriptionText, subscriptionMarkup);
            } else {
                // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                StringBuilder subscriptionText = new StringBuilder("üì± *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n");
                
                for (Subscription subscription : validSubscriptions) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–¥–ø–∏—Å–∫–∏
                    String subscriptionLevel = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
                    switch (subscription.getSubscriptionLevel()) {
                        case BASIC:
                            subscriptionLevel = "–ë–∞–∑–æ–≤—ã–π";
                            break;
                        case STANDARD:
                            subscriptionLevel = "–°—Ç–∞–Ω–¥–∞—Ä—Ç";
                            break;
                        case PREMIUM:
                            subscriptionLevel = "–ü—Ä–µ–º–∏—É–º";
                            break;
                    }
                    
                    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                    java.time.format.DateTimeFormatter formatter = 
                        java.time.format.DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
                    String startDate = subscription.getStartDate() != null ? 
                        subscription.getStartDate().format(formatter) : "–ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞";
                    String endDate = subscription.getEndDate() != null ? 
                        subscription.getEndDate().format(formatter) : "–ë–µ—Å—Å—Ä–æ—á–Ω–æ";
                    
                    subscriptionText.append("üî∞ *–£—Ä–æ–≤–µ–Ω—å:* ").append(subscriptionLevel).append("\n");
                    subscriptionText.append("üÜî *–ö–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:* `").append(subscription.getActivationCode()).append("`\n");
                    subscriptionText.append("üìÖ *–ù–∞—á–∞–ª–æ:* ").append(startDate).append("\n");
                    subscriptionText.append("‚è± *–û–∫–æ–Ω—á–∞–Ω–∏–µ:* ").append(endDate).append("\n");
                    subscriptionText.append("‚úÖ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–Ω–∞\n\n");
                }
                
                subscriptionText.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:");
                
                // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                InlineKeyboardMarkup subscriptionMarkup = new InlineKeyboardMarkup();
                List<List<InlineKeyboardButton>> subscriptionRows = new ArrayList<>();
                
                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                subscriptionRows.add(List.of(createButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏", "subscription_settings")));
                
                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                subscriptionRows.add(List.of(createButton("üíª –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "download_app")));
                
                // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                subscriptionRows.add(List.of(createButton("üí≥ –ö—É–ø–∏—Ç—å –µ—â–µ –ø–æ–¥–ø–∏—Å–∫—É", "shop_category_desktop")));
                
                // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                subscriptionRows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
                
                subscriptionMarkup.setKeyboard(subscriptionRows);
                
                sendMessage(chatId.toString(), subscriptionText.toString(), subscriptionMarkup);
            }
        } catch (Exception e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º –±–æ–ª–µ–µ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: ", e);
            sendMessage(chatId.toString(), """
                    ‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö*
                    
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
                    """);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * 
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void handleSubscriptionSettings(Long chatId) {
        String stringChatId = chatId.toString();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏
        Optional<User> userOpt = userRepository.findByTelegramId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(stringChatId, """
                    ‚ùå *–û—à–∏–±–∫–∞!*
                    
                    –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.
                    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–≤—è–∂–∏—Ç–µ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /linkTelegram.
                    """);
            return;
        }
        
        User user = userOpt.get();
        List<Subscription> activeSubscriptions = subscriptionService.getUserActiveSubscriptions(user.getId());
        
        if (activeSubscriptions.isEmpty()) {
            sendMessage(stringChatId, """
                    ‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫*
                    
                    –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /subscription.
                    """);
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        String message = """
                ‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏*
                
                –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏:
                """;
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        List<InlineKeyboardButton> rowDownload = new ArrayList<>();
        rowDownload.add(createButton("üíª –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "download_app"));
        rows.add(rowDownload);
        
        List<InlineKeyboardButton> rowRenew = new ArrayList<>();
        rowRenew.add(createButton("üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", "renew_subscription"));
        rows.add(rowRenew);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        List<InlineKeyboardButton> rowSubscription = new ArrayList<>();
        rowSubscription.add(createButton("üìä –ö —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫", "subscription_command"));
        rows.add(rowSubscription);
        
        List<InlineKeyboardButton> rowHome = new ArrayList<>();
        rowHome.add(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"));
        rows.add(rowHome);
        
        markup.setKeyboard(rows);
        
        sendMessage(stringChatId, message, markup);
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * 
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void handleDownloadApp(Long chatId) {
        String message = """
                üíª *–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è*
                
                –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –Ω–∞—à–µ desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.
                –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
                """;
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å—Å—ã–ª–∫–∞)
        InlineKeyboardButton downloadButton = new InlineKeyboardButton();
        downloadButton.setText("üì• –°–∫–∞—á–∞—Ç—å –¥–ª—è Windows");
        downloadButton.setUrl("https://clothing-brand.com/app/download/windows");
        
        // –ö–Ω–æ–ø–∫–∞ –¥–ª—è MacOS
        InlineKeyboardButton downloadMacButton = new InlineKeyboardButton();
        downloadMacButton.setText("üçé –°–∫–∞—á–∞—Ç—å –¥–ª—è MacOS");
        downloadMacButton.setUrl("https://clothing-brand.com/app/download/macos");
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Ä–∞–∑–Ω—ã–µ —Ä—è–¥—ã
        rows.add(List.of(downloadButton));
        rows.add(List.of(downloadMacButton));
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "subscription_settings"));
        rows.add(backRow);
        
        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        List<InlineKeyboardButton> homeRow = new ArrayList<>();
        homeRow.add(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu"));
        rows.add(homeRow);
        
        markup.setKeyboard(rows);
        
        sendMessage(chatId.toString(), message, markup);
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
     * 
     * @param chatId ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void handleRenewSubscription(Long chatId) {
        String stringChatId = chatId.toString();
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏
        Optional<User> userOpt = userRepository.findByTelegramId(chatId);
        if (userOpt.isEmpty()) {
            sendMessage(stringChatId, "‚ùå –û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.");
            return;
        }
        
        User user = userOpt.get();
        List<Subscription> activeSubscriptions = subscriptionService.getUserActiveSubscriptions(user.getId());
        
        String message = """
                üîÑ *–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*
                
                –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:
                
                üîπ *–ë–∞–∑–æ–≤—ã–π* - 99‚ÇΩ/–º–µ—Å—è—Ü
                üî∏ *–°—Ç–∞–Ω–¥–∞—Ä—Ç* - 199‚ÇΩ/–º–µ—Å—è—Ü
                üî∂ *–ü—Ä–µ–º–∏—É–º* - 299‚ÇΩ/–º–µ—Å—è—Ü
                
                –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:
                """;
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        rows.add(List.of(createButton("–ë–∞–∑–æ–≤—ã–π (1 –º–µ—Å—è—Ü)", "desktop_buy_basic_1")));
        rows.add(List.of(createButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç (3 –º–µ—Å—è—Ü–∞)", "desktop_buy_standard_3")));
        rows.add(List.of(createButton("–ü—Ä–µ–º–∏—É–º (12 –º–µ—Å—è—Ü–µ–≤)", "desktop_buy_premium_12")));
        
        // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        rows.add(List.of(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", "subscription_settings")));
        rows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        sendMessage(stringChatId, message, markup);
    }

}

