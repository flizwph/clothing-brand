package com.brand.backend.infrastructure.integration.telegram.admin.handlers;

import com.brand.backend.infrastructure.integration.telegram.admin.keyboards.AdminKeyboards;
import com.brand.backend.infrastructure.integration.telegram.admin.service.AdminBotService;
import com.brand.backend.domain.product.model.Product;
import com.brand.backend.domain.product.repository.ProductRepository;
import com.brand.backend.application.product.service.ProductService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;

import java.util.List;
import java.util.Optional;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@Component
@RequiredArgsConstructor
public class ProductHandler {

    private final ProductRepository productRepository;
    private final ProductService productService;
    private final AdminBotService adminBotService;
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞: 1000.50
    private static final Pattern PRICE_PATTERN = Pattern.compile("^(\\d+(\\.\\d+)?)$");
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–≤–æ–¥–∞ –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞: 10 20 30
    private static final Pattern STOCK_PATTERN = Pattern.compile("^(\\d+)\\s+(\\d+)\\s+(\\d+)$");
    
    // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ 1000.50 10 20 30
    private static final Pattern CREATE_PRODUCT_PATTERN = Pattern.compile("^([^\\d]+)\\s+(\\d+(\\.\\d+)?)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)$");
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
     */
    public SendMessage handleAllProducts(String chatId) {
        List<Product> products = productRepository.findAll();
        
        if (products.isEmpty()) {
            return createMessage(chatId, "*üëï –¢–æ–≤–∞—Ä—ã*\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.", AdminKeyboards.createProductsKeyboard());
        }
        
        StringBuilder message = new StringBuilder("*üëï –í—Å–µ —Ç–æ–≤–∞—Ä—ã*\n\n");
        
        for (Product product : products) {
            message.append(formatProductShort(product)).append("\n\n");
        }
        
        return createMessage(chatId, message.toString(), AdminKeyboards.createProductsKeyboard());
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleProductSearchRequest(String chatId) {
        String text = """
                *üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞*
                
                –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
                
                –ù–∞–ø—Ä–∏–º–µ—Ä: `/product_search —Ñ—É—Ç–±–æ–ª–∫–∞`
                """;
        
        return createMessage(chatId, text, AdminKeyboards.createBackKeyboard("product:all"));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleProductSearch(String chatId, String query) {
        List<Product> products = productRepository.findAll()
                .stream()
                .filter(p -> p.getName().toLowerCase().contains(query.toLowerCase()))
                .toList();
        
        if (products.isEmpty()) {
            return createMessage(chatId, "*üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤*\n\n–¢–æ–≤–∞—Ä—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", 
                    AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        StringBuilder message = new StringBuilder("*üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞*\n\n");
        message.append("–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ").append(products.size()).append("\n\n");
        
        for (Product product : products) {
            message.append(formatProductShort(product)).append("\n\n");
        }
        
        return createMessage(chatId, message.toString(), AdminKeyboards.createBackKeyboard("product:all"));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleProductDetails(String chatId, Long productId) {
        Optional<Product> productOpt = productRepository.findById(productId);
        
        if (productOpt.isEmpty()) {
            return createMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        Product product = productOpt.get();
        
        return createMessage(chatId, 
                "*üëï –î–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞*\n\n" + formatProductFull(product), 
                AdminKeyboards.createProductDetailsKeyboard(product.getId()));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleUpdatePriceRequest(String chatId, Long productId) {
        Optional<Product> productOpt = productRepository.findById(productId);
        
        if (productOpt.isEmpty()) {
            return createMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        Product product = productOpt.get();
        
        String text = String.format("""
                *üí∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞*
                
                –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *%s*
                –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: *%.2f*
                
                –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                `/product_price_%d 1000.50`
                """, product.getName(), product.getPrice(), product.getId());
        
        return createMessage(chatId, text, AdminKeyboards.createBackKeyboard("product:details:" + productId));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleUpdatePrice(String chatId, Long productId, String priceText) {
        Optional<Product> productOpt = productRepository.findById(productId);
        
        if (productOpt.isEmpty()) {
            return createMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        Matcher matcher = PRICE_PATTERN.matcher(priceText);
        
        if (!matcher.matches()) {
            return createMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 1000.50", 
                    AdminKeyboards.createBackKeyboard("product:details:" + productId));
        }
        
        double newPrice = Double.parseDouble(matcher.group(1));
        Product product = productOpt.get();
        double oldPrice = product.getPrice();
        
        product.setPrice(newPrice);
        productRepository.save(product);
        
        String text = String.format("""
                ‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!
                
                *%s*
                
                –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: *%.2f*
                –ù–æ–≤–∞—è —Ü–µ–Ω–∞: *%.2f*
                """, product.getName(), oldPrice, newPrice);
        
        return createMessage(chatId, text, AdminKeyboards.createProductDetailsKeyboard(productId));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleUpdateStockRequest(String chatId, Long productId) {
        Optional<Product> productOpt = productRepository.findById(productId);
        
        if (productOpt.isEmpty()) {
            return createMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        Product product = productOpt.get();
        
        String text = String.format("""
                *üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞*
                
                –¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: *%s*
                
                –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∞—Å—ã:
                S: *%d* —à—Ç.
                M: *%d* —à—Ç.
                L: *%d* —à—Ç.
                
                –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–ø–∞—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                `/product_stock_%d 10 20 30`
                
                –≥–¥–µ —á–∏—Å–ª–∞ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Ä–∞–∑–º–µ—Ä–æ–≤ S, M –∏ L —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
                """, product.getName(), 
                product.getAvailableQuantityS(), 
                product.getAvailableQuantityM(), 
                product.getAvailableQuantityL(),
                product.getId());
        
        return createMessage(chatId, text, AdminKeyboards.createBackKeyboard("product:details:" + productId));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∞—Å–æ–≤ —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleUpdateStock(String chatId, Long productId, String stockText) {
        Optional<Product> productOpt = productRepository.findById(productId);
        
        if (productOpt.isEmpty()) {
            return createMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        Matcher matcher = STOCK_PATTERN.matcher(stockText);
        
        if (!matcher.matches()) {
            return createMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –∑–∞–ø–∞—Å–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 10 20 30", 
                    AdminKeyboards.createBackKeyboard("product:details:" + productId));
        }
        
        int quantityS = Integer.parseInt(matcher.group(1));
        int quantityM = Integer.parseInt(matcher.group(2));
        int quantityL = Integer.parseInt(matcher.group(3));
        
        Product product = productOpt.get();
        int oldS = product.getAvailableQuantityS();
        int oldM = product.getAvailableQuantityM();
        int oldL = product.getAvailableQuantityL();
        
        product.setAvailableQuantityS(quantityS);
        product.setAvailableQuantityM(quantityM);
        product.setAvailableQuantityL(quantityL);
        productRepository.save(product);
        
        String text = String.format("""
                ‚úÖ –ó–∞–ø–∞—Å—ã —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!
                
                *%s*
                
                –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∞—Å—ã:
                S: *%d* —à—Ç.
                M: *%d* —à—Ç.
                L: *%d* —à—Ç.
                
                –ù–æ–≤—ã–µ –∑–∞–ø–∞—Å—ã:
                S: *%d* —à—Ç.
                M: *%d* —à—Ç.
                L: *%d* —à—Ç.
                """, product.getName(), oldS, oldM, oldL, quantityS, quantityM, quantityL);
        
        return createMessage(chatId, text, AdminKeyboards.createProductDetailsKeyboard(productId));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleCreateProductRequest(String chatId) {
        String text = """
                *‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞*
                
                –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                `/product_create –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 1000.50 10 20 30`
                
                –≥–¥–µ:
                - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
                - 1000.50 - —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞
                - 10 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä–∞ S
                - 20 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä–∞ M
                - 30 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä–∞ L
                """;
        
        return createMessage(chatId, text, AdminKeyboards.createBackKeyboard("product:all"));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleCreateProduct(String chatId, String productData) {
        Matcher matcher = CREATE_PRODUCT_PATTERN.matcher(productData);
        
        if (!matcher.matches()) {
            return createMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ 1000.50 10 20 30", 
                    AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        String name = matcher.group(1).trim();
        double price = Double.parseDouble(matcher.group(2));
        int quantityS = Integer.parseInt(matcher.group(4));
        int quantityM = Integer.parseInt(matcher.group(5));
        int quantityL = Integer.parseInt(matcher.group(6));
        
        Product product = productService.createProduct(name, price, quantityS, quantityM, quantityL);
        
        String text = String.format("""
                ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!
                
                *%s*
                
                –¶–µ–Ω–∞: *%.2f*
                
                –ó–∞–ø–∞—Å—ã:
                S: *%d* —à—Ç.
                M: *%d* —à—Ç.
                L: *%d* —à—Ç.
                """, product.getName(), product.getPrice(), 
                product.getAvailableQuantityS(), 
                product.getAvailableQuantityM(), 
                product.getAvailableQuantityL());
        
        return createMessage(chatId, text, AdminKeyboards.createProductDetailsKeyboard(product.getId()));
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String formatProductShort(Product product) {
        StringBuilder result = new StringBuilder();
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown
        String escapedName = escapeMarkdown(product.getName());
        result.append("*").append(escapedName).append("*\n");
        result.append("üí∞ –¶–µ–Ω–∞: ").append(String.format("%.2f", product.getPrice())).append("\n");
        
        int totalQuantity = product.getAvailableQuantityS() + product.getAvailableQuantityM() + product.getAvailableQuantityL();
        result.append("üì¶ –í –Ω–∞–ª–∏—á–∏–∏: ").append(totalQuantity).append(" —à—Ç.\n");
        
        result.append("üëÅ /product\\_").append(product.getId());
        
        return result.toString();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String formatProductFull(Product product) {
        StringBuilder result = new StringBuilder();
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ Markdown
        String escapedName = escapeMarkdown(product.getName());
        result.append("*–ù–∞–∑–≤–∞–Ω–∏–µ:* ").append(escapedName).append("\n");
        result.append("*–¶–µ–Ω–∞:* ").append(String.format("%.2f", product.getPrice())).append("\n\n");
        
        result.append("*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã:* ");
        if (!product.getSizes().isEmpty()) {
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑–º–µ—Ä
            result.append(String.join(", ", 
                product.getSizes().stream()
                    .map(this::escapeMarkdown)
                    .toList()));
        } else {
            result.append("-");
        }
        result.append("\n\n");
        
        result.append("*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏:*\n");
        result.append("S: ").append(product.getAvailableQuantityS()).append(" —à—Ç.\n");
        result.append("M: ").append(product.getAvailableQuantityM()).append(" —à—Ç.\n");
        result.append("L: ").append(product.getAvailableQuantityL()).append(" —à—Ç.\n\n");
        
        int totalQuantity = product.getAvailableQuantityS() + product.getAvailableQuantityM() + product.getAvailableQuantityL();
        result.append("*–í—Å–µ–≥–æ –≤ –Ω–∞–ª–∏—á–∏–∏:* ").append(totalQuantity).append(" —à—Ç.\n");
        
        return result.toString();
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown
     */
    private String escapeMarkdown(String text) {
        if (text == null) {
            return "";
        }
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown: * _ ` [ ] ( )
        return text.replace("*", "\\*")
                  .replace("_", "\\_")
                  .replace("`", "\\`")
                  .replace("[", "\\[")
                  .replace("]", "\\]")
                  .replace("(", "\\(")
                  .replace(")", "\\)")
                  .replace(".", "\\.")
                  .replace("!", "\\!")
                  .replace("-", "\\-")
                  .replace("+", "\\+")
                  .replace("=", "\\=")
                  .replace("#", "\\#")
                  .replace("~", "\\~")
                  .replace("|", "\\|")
                  .replace(">", "\\>")
                  .replace("<", "\\<");
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private SendMessage createMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("Markdown");
        return message;
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    private SendMessage createMessage(String chatId, String text, org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard keyboard) {
        SendMessage message = createMessage(chatId, text);
        message.setReplyMarkup(keyboard);
        return message;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleDeleteProductRequest(String chatId, Long productId) {
        Optional<Product> productOpt = productRepository.findById(productId);
        
        if (productOpt.isEmpty()) {
            return createMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        Product product = productOpt.get();
        
        String text = String.format("""
                *üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞*
                
                –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?
                
                *%s*
                
                –¶–µ–Ω–∞: *%.2f*
                
                –ó–∞–ø–∞—Å—ã:
                S: *%d* —à—Ç.
                M: *%d* —à—Ç.
                L: *%d* —à—Ç.
                """, product.getName(), product.getPrice(),
                product.getAvailableQuantityS(),
                product.getAvailableQuantityM(),
                product.getAvailableQuantityL());
        
        return createMessage(chatId, text, AdminKeyboards.createConfirmKeyboard("product:delete", productId.toString()));
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
     */
    public SendMessage handleDeleteProduct(String chatId, Long productId) {
        Optional<Product> productOpt = productRepository.findById(productId);
        
        if (productOpt.isEmpty()) {
            return createMessage(chatId, "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", AdminKeyboards.createBackKeyboard("product:all"));
        }
        
        Product product = productOpt.get();
        String productName = product.getName();
        
        try {
            productService.deleteProduct(productId);
            
            return createMessage(chatId, String.format("""
                    ‚úÖ –¢–æ–≤–∞—Ä *%s* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!
                    """, escapeMarkdown(productName)), AdminKeyboards.createBackKeyboard("product:all"));
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {}", e.getMessage());
            return createMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞.", AdminKeyboards.createBackKeyboard("product:details:" + productId));
        }
    }
} 