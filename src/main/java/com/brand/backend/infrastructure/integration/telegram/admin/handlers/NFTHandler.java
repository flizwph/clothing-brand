package com.brand.backend.infrastructure.integration.telegram.admin.handlers;

import com.brand.backend.infrastructure.integration.telegram.admin.keyboards.AdminKeyboards;
import com.brand.backend.infrastructure.integration.telegram.admin.service.AdminBotService;
import com.brand.backend.domain.nft.model.NFT;
import com.brand.backend.domain.user.model.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;

import java.util.ArrayList;
import java.util.List;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å NFT
 */
@Component
@Slf4j
@RequiredArgsConstructor
public class NFTHandler {

    private final AdminBotService adminBotService;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è NFT
     */
    public void handleNftCallback(String chatId, String command) {
        log.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ NFT callback –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {}", command);
        
        switch (command) {
            case "all" -> handleAllNFTs(chatId);
            case "unrevealed" -> handleUnrevealedNFTs(chatId);
            case "searchByUser" -> handleNFTSearchForm(chatId);
            default -> handleNFTMenu(chatId);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö NFT
     */
    public SendMessage handleAllNFTs(String chatId) {
        log.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö NFT –æ—Ç {}", chatId);
        List<NFT> allNFTs = adminBotService.getAllNFTs();
        
        if (allNFTs.isEmpty()) {
            return createMessage(chatId, "NFT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", AdminKeyboards.createBackKeyboard("nft:menu"));
        }
        
        return createNFTListMessage(chatId, allNFTs, "–í—Å–µ NFT (" + allNFTs.size() + "):");
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö NFT
     */
    public SendMessage handleUnrevealedNFTs(String chatId) {
        log.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã—Ö NFT –æ—Ç {}", chatId);
        List<NFT> unrevealedNFTs = adminBotService.getUnrevealedNFTs();
        
        if (unrevealedNFTs.isEmpty()) {
            return createMessage(chatId, "–ù–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ NFT –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", AdminKeyboards.createBackKeyboard("nft:menu"));
        }
        
        return createNFTListMessage(chatId, unrevealedNFTs, "–ù–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ NFT (" + unrevealedNFTs.size() + "):");
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ NFT –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
     */
    public SendMessage handleNFTSearchForm(String chatId) {
        log.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ NFT –æ—Ç {}", chatId);
        String text = """
                *üîç –ü–æ–∏—Å–∫ NFT –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É*
                
                –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email –¥–ª—è –ø–æ–∏—Å–∫–∞ NFT.
                
                –ù–∞–ø—Ä–∏–º–µ—Ä:
                /nft_search username
                /nft_search email@example.com
                """;
        
        return createMessage(chatId, text, AdminKeyboards.createBackKeyboard("nft:menu"));
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é NFT
     */
    public SendMessage handleNFTMenu(String chatId) {
        log.debug("–ó–∞–ø—Ä–æ—Å –Ω–∞ –º–µ–Ω—é NFT –æ—Ç {}", chatId);
        String text = "*üé® –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ NFT*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:";
        return createMessage(chatId, text, AdminKeyboards.createNFTKeyboard());
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ NFT –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É
     */
    public SendMessage handleNFTSearch(String chatId, String query) {
        log.debug("–ü–æ–∏—Å–∫ NFT –ø–æ –∑–∞–ø—Ä–æ—Å—É '{}' –¥–ª—è {}", query, chatId);
        User user = adminBotService.getUserByUsername(query);
        
        if (user == null) {
            return createMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ –∑–∞–ø—Ä–æ—Å—É '" + query + "' –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
                    AdminKeyboards.createBackKeyboard("nft:menu"));
        }
        
        List<NFT> userNFTs = adminBotService.getNFTsByUser(user);
        
        if (userNFTs.isEmpty()) {
            return createMessage(chatId, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + user.getUsername() + " –Ω–µ—Ç NFT.", 
                    AdminKeyboards.createBackKeyboard("nft:menu"));
        }
        
        return createNFTListMessage(chatId, userNFTs, "NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + user.getUsername() + " (" + userNFTs.size() + "):");
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö NFT
     */
    public SendMessage handleNftList(String chatId) {
        return handleAllNFTs(chatId);
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º NFT
     */
    private SendMessage createNFTListMessage(String chatId, List<NFT> nfts, String title) {
        StringBuilder message = new StringBuilder("*" + title + "*\n\n");
        
        for (int i = 0; i < nfts.size(); i++) {
            NFT nft = nfts.get(i);
            message.append(i + 1).append(". ID: ").append(nft.getId()).append("\n");
            message.append("   Placeholder URI: ").append(nft.getPlaceholderUri()).append("\n");
            message.append("   –†–∞—Å–∫—Ä—ã—Ç: ").append(nft.isRevealed() ? "‚úÖ" : "‚ùå").append("\n");
            
            if (nft.isRevealed() && nft.getRevealedUri() != null) {
                message.append("   Revealed URI: ").append(nft.getRevealedUri()).append("\n");
            }
            
            if (nft.getRarity() != null) {
                message.append("   –†–µ–¥–∫–æ—Å—Ç—å: ").append(nft.getRarity()).append("\n");
            }
            
            User owner = nft.getUser();
            if (owner != null) {
                message.append("   –í–ª–∞–¥–µ–ª–µ—Ü: ").append(owner.getUsername()).append("\n");
            }
            
            message.append("\n");
        }
        
        return createMessage(chatId, message.toString(), AdminKeyboards.createBackKeyboard("nft:menu"));
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private SendMessage createMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("Markdown");
        return message;
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    private SendMessage createMessage(String chatId, String text, org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard keyboard) {
        SendMessage message = createMessage(chatId, text);
        message.setReplyMarkup(keyboard);
        return message;
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –∏ callback-–¥–∞–Ω–Ω—ã–º–∏
     */
    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public SendMessage handleUserNFTs(String chatId, Long userId) {
        log.info(">> –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);
        try {
            User user = adminBotService.getUserById(userId);
            
            if (user == null) {
                log.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω", userId);
                return createMessage(chatId, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
            
            List<NFT> userNFTs = adminBotService.getNFTsByUser(user);
            
            if (userNFTs.isEmpty()) {
                log.info("–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–µ—Ç NFT", user.getUsername());
                return createMessage(
                    chatId, 
                    "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + user.getUsername() + " –Ω–µ—Ç NFT.", 
                    AdminKeyboards.createBackKeyboard("viewUser:" + userId)
                );
            }
            
            StringBuilder message = new StringBuilder();
            message.append("üé® *NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ").append(user.getUsername()).append("*\n\n");
            
            for (int i = 0; i < userNFTs.size(); i++) {
                NFT nft = userNFTs.get(i);
                message.append(i + 1).append(". ID: ").append(nft.getId()).append("\n");
                message.append("   Placeholder URI: ").append(nft.getPlaceholderUri()).append("\n");
                message.append("   –†–∞—Å–∫—Ä—ã—Ç: ").append(nft.isRevealed() ? "‚úÖ" : "‚ùå").append("\n");
                if (nft.isRevealed() && nft.getRevealedUri() != null) {
                    message.append("   Revealed URI: ").append(nft.getRevealedUri()).append("\n");
                }
                if (nft.getRarity() != null) {
                    message.append("   –†–µ–¥–∫–æ—Å—Ç—å: ").append(nft.getRarity()).append("\n");
                }
                message.append("\n");
            }
            
            return createMessage(
                chatId, 
                message.toString(), 
                AdminKeyboards.createBackKeyboard("viewUser:" + userId)
            );
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage(), e);
            return createMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
} 