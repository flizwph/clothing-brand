package com.brand.backend.infrastructure.integration.telegram.user.handler;

import com.brand.backend.infrastructure.integration.telegram.user.command.CartCommand;
import com.brand.backend.infrastructure.integration.telegram.user.service.CartService;
import com.brand.backend.infrastructure.integration.telegram.user.service.TelegramProductService;
import com.brand.backend.infrastructure.integration.telegram.user.service.TelegramBotService;
import com.brand.backend.infrastructure.integration.telegram.user.service.UserSessionService;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import java.util.ArrayList;
import java.util.List;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
 */
@Component
@RequiredArgsConstructor
public class CallbackHandler {

    private static final Logger log = LoggerFactory.getLogger(CallbackHandler.class);
    
    private final TelegramProductService productService;
    private final CartService cartService;
    private final UserSessionService userSessionService;
    private final CartCommand cartCommand;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * 
     * @param callbackQuery callback-–∑–∞–ø—Ä–æ—Å
     * @return –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ null
     */
    public BotApiMethod<?> handle(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        
        log.info("–ü–æ–ª—É—á–µ–Ω callback –æ—Ç —á–∞—Ç–∞ {}: {}", chatId, callbackData);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä TelegramBotService –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
        TelegramBotService dummyBot = new TelegramBotServiceAdapter();
        handleCallback(callbackData, chatId, messageId, dummyBot);
        
        // –í –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤ –∑–¥–µ—Å—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null, —Ç–∞–∫ –∫–∞–∫ callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ 
        // —Ñ–æ—Ä–º–∏—Ä—É—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç –æ—Ç–≤–µ—Ç—ã —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
        return null;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å
     * 
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback
     * @param chatId ID —á–∞—Ç–∞
     * @param messageId ID —Å–æ–æ–±—â–µ–Ω–∏—è
     * @param bot —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
     */
    public void handleCallback(String callbackData, Long chatId, Integer messageId, TelegramBotService bot) {
        log.info("Handling callback from chat {}: {}", chatId, callbackData);
        
        String stringChatId = chatId.toString();
        
        if (callbackData.equals("shop_categories")) {
            handleShopCategoriesCallback(stringChatId, bot);
        } else if (callbackData.equals("shop_category_clothes")) {
            handleClothesCategoryCallback(stringChatId, bot);
        } else if (callbackData.equals("shop_category_accessories")) {
            handleAccessoriesCategoryCallback(stringChatId, bot);
        } else if (callbackData.equals("shop_category_desktop")) {
            handleDesktopCategoryCallback(stringChatId, bot);
        } else if (callbackData.equals("coming_soon")) {
            handleComingSoonCallback(stringChatId, bot);
        } else if (callbackData.startsWith("desktop_")) {
            handleDesktopPlanCallback(callbackData, stringChatId, bot);
        } else if (callbackData.equals("shop")) {
            handleShopCallback(stringChatId, bot);
        } else if (callbackData.equals("help")) {
            handleHelpCallback(stringChatId, bot);
        } else if (callbackData.equals("main_menu")) {
            handleMainMenuCallback(stringChatId, bot);
        } else if (callbackData.equals("startLinkTelegram")) {
            handleLinkTelegramCallback(chatId, stringChatId, bot);
        } else if (callbackData.equals("startLinkDiscord")) {
            handleLinkDiscordCallback(stringChatId, bot);
        } else if (callbackData.startsWith("page_")) {
            handlePageCallback(callbackData, chatId, messageId, bot);
        } else if (callbackData.startsWith("size_")) {
            handleSizeCallback(callbackData, stringChatId, bot);
        } else if (callbackData.startsWith("add_to_cart_")) {
            handleAddToCartCallback(callbackData, stringChatId, bot);
        } else if (callbackData.equals("view_cart")) {
            handleViewCartCallback(stringChatId, bot);
        } else if (callbackData.startsWith("remove_from_cart_")) {
            handleRemoveFromCartCallback(callbackData, stringChatId, bot);
        } else if (callbackData.equals("checkout")) {
            handleCheckoutCallback(stringChatId, bot);
        } else if (callbackData.equals("clear_cart")) {
            handleClearCartCallback(chatId, bot);
        } else if (callbackData.startsWith("cart_increase_")) {
            handleCartIncreaseCallback(callbackData, chatId, bot);
        } else if (callbackData.startsWith("cart_decrease_")) {
            handleCartDecreaseCallback(callbackData, chatId, bot);
        } else if (callbackData.startsWith("cart_remove_")) {
            handleCartRemoveCallback(callbackData, chatId, bot);
        } else {
            log.warn("Unknown callback data: {}", callbackData);
            bot.sendMessage(stringChatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
        }
    }
    
    private void handleShopCategoriesCallback(String chatId, TelegramBotService bot) {
        bot.showShopCategories(chatId);
    }
    
    private void handleClothesCategoryCallback(String chatId, TelegramBotService bot) {
        bot.showClothesCategory(chatId);
    }
    
    private void handleAccessoriesCategoryCallback(String chatId, TelegramBotService bot) {
        bot.showAccessoriesCategory(chatId);
    }
    
    private void handleDesktopCategoryCallback(String chatId, TelegramBotService bot) {
        bot.showDesktopAppCategory(chatId);
    }
    
    private void handleComingSoonCallback(String chatId, TelegramBotService bot) {
        bot.showComingSoon(chatId);
    }
    
    private void handleDesktopPlanCallback(String callbackData, String chatId, TelegramBotService bot) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (callbackData.equals("desktop_basic")) {
            bot.showDesktopPlan(chatId, "basic");
        } else if (callbackData.equals("desktop_standard")) {
            bot.showDesktopPlan(chatId, "standard");
        } else if (callbackData.equals("desktop_premium")) {
            bot.showDesktopPlan(chatId, "premium");
        } else if (callbackData.startsWith("desktop_buy_")) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: desktop_buy_plan_duration
            String[] parts = callbackData.split("_");
            if (parts.length >= 4) {
                String plan = parts[2];
                int duration = Integer.parseInt(parts[3]);
                handleDesktopSubscriptionPurchase(chatId, plan, duration, bot);
            }
        }
    }
    
    private void handleDesktopSubscriptionPurchase(String chatId, String plan, int duration, TelegramBotService bot) {
        String planName;
        int pricePerMonth;
        
        switch (plan) {
            case "basic":
                planName = "–ë–∞–∑–æ–≤—ã–π";
                pricePerMonth = 99;
                break;
            case "standard":
                planName = "–°—Ç–∞–Ω–¥–∞—Ä—Ç";
                pricePerMonth = 199;
                break;
            case "premium":
                planName = "–ü—Ä–µ–º–∏—É–º";
                pricePerMonth = 299;
                break;
            default:
                planName = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π";
                pricePerMonth = 0;
                break;
        }
        
        double discount = 0;
        if (duration == 3) {
            discount = 0.1; // 10% —Å–∫–∏–¥–∫–∞
        } else if (duration == 12) {
            discount = 0.2; // 20% —Å–∫–∏–¥–∫–∞
        }
        
        double totalPrice = pricePerMonth * duration * (1 - discount);
        
        String message = String.format("""
                üõí *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*
                
                –ü–ª–∞–Ω: %s
                –°—Ä–æ–∫: %d –º–µ—Å—è—Ü%s
                –¶–µ–Ω–∞ –∑–∞ –º–µ—Å—è—Ü: %d‚ÇΩ
                –°–∫–∏–¥–∫–∞: %.0f%%
                
                *–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: %.0f‚ÇΩ*
                
                –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!
                """, 
                planName, 
                duration, 
                duration == 1 ? "" : (duration < 5 ? "–∞" : "–µ–≤"), 
                pricePerMonth,
                discount * 100,
                totalPrice);
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        rows.add(List.of(createButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω–∞–º", "shop_category_desktop")));
        rows.add(List.of(createButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")));
        
        markup.setKeyboard(rows);
        
        bot.sendMessage(chatId, message, markup);
    }
    
    private void handleShopCallback(String chatId, TelegramBotService bot) {
        bot.showProductPage(chatId, 0);
    }
    
    private void handleHelpCallback(String chatId, TelegramBotService bot) {
        String helpMessage = """
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                
                /buy - –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É
                /cart - –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫
                /linkTelegram - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram –∞–∫–∫–∞—É–Ω—Ç
                /linkDiscord - –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord –∞–∫–∫–∞—É–Ω—Ç
                /help - –ü–æ–º–æ—â—å
                
                –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
                """;
        bot.sendMessage(chatId, helpMessage);
    }
    
    private void handleMainMenuCallback(String chatId, TelegramBotService bot) {
        String welcomeMessage = """
                üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!
                
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:
                """;
        bot.sendMessage(chatId, welcomeMessage, bot.getMainMenuButtons());
    }
    
    private void handleLinkTelegramCallback(Long chatId, String stringChatId, TelegramBotService bot) {
        userSessionService.setUserState(chatId, "linkTelegram");
        String message = """
                üîó *–ü—Ä–∏–≤—è–∑–∫–∞ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞*
                
                –î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:
                1. –í–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞
                2. –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"
                3. –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram"
                4. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–Ω—ã–π –∫–æ–¥
                5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ —Å—é–¥–∞
                
                ‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç
                """;
        bot.sendMessage(stringChatId, message);
    }
    
    private void handleLinkDiscordCallback(String chatId, TelegramBotService bot) {
        bot.handleLinkDiscordCommand(chatId);
    }
    
    private void handlePageCallback(String callbackData, Long chatId, Integer messageId, TelegramBotService bot) {
        int pageIndex = Integer.parseInt(callbackData.substring(5));
        bot.editProductPage(chatId, messageId, pageIndex);
    }
    
    private void handleSizeCallback(String callbackData, String chatId, TelegramBotService bot) {
        String[] parts = callbackData.split("_");
        Long productId = Long.parseLong(parts[1]);
        String size = parts[2];
        productService.handleProductSelection(chatId, productId, size, bot);
    }
    
    private void handleAddToCartCallback(String callbackData, String chatId, TelegramBotService bot) {
        String[] parts = callbackData.split("_");
        Long productId = Long.parseLong(parts[1]);
        String size = parts.length > 2 ? parts[2] : "M"; // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        cartService.addProductToCart(Long.parseLong(chatId), productId, size, 1);
        bot.sendMessage(chatId, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cart –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã.");
    }
    
    private void handleViewCartCallback(String chatId, TelegramBotService bot) {
        cartCommand.showCart(Long.parseLong(chatId));
    }
    
    private void handleRemoveFromCartCallback(String callbackData, String chatId, TelegramBotService bot) {
        int itemIndex = Integer.parseInt(callbackData.substring(17));
        cartCommand.handleRemoveItem(Long.parseLong(chatId), itemIndex);
    }
    
    private void handleCheckoutCallback(String chatId, TelegramBotService bot) {
        bot.sendMessage(chatId, "üõçÔ∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!");
    }
    
    private void handleClearCartCallback(Long chatId, TelegramBotService bot) {
        cartCommand.handleClearCart(chatId);
    }
    
    private void handleCartIncreaseCallback(String callbackData, Long chatId, TelegramBotService bot) {
        int itemIndex = Integer.parseInt(callbackData.substring(14));
        cartCommand.handleIncreaseQuantity(chatId, itemIndex);
    }
    
    private void handleCartDecreaseCallback(String callbackData, Long chatId, TelegramBotService bot) {
        int itemIndex = Integer.parseInt(callbackData.substring(14));
        cartCommand.handleDecreaseQuantity(chatId, itemIndex);
    }
    
    private void handleCartRemoveCallback(String callbackData, Long chatId, TelegramBotService bot) {
        int itemIndex = Integer.parseInt(callbackData.substring(12));
        cartCommand.handleRemoveItem(chatId, itemIndex);
    }
    
    /**
     * –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è TelegramBotService, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –≤ –º–µ—Ç–æ–¥–µ handle
     */
    private static class TelegramBotServiceAdapter extends TelegramBotService {
        public TelegramBotServiceAdapter() {
            super(null, null, null, null, true);
        }
        
        @Override
        public void sendMessage(String chatId, String text) {
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        @Override
        public void sendMessage(String chatId, String text, org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup markup) {
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        @Override
        public void editProductPage(Long chatId, Integer messageId, int pageIndex) {
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        @Override
        public void showProductPage(String chatId, int pageIndex) {
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        @Override
        public void handleLinkDiscordCommand(String chatId) {
            // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        }
        
        @Override
        public String getBotUsername() {
            return "dummy";
        }
        
        @Override
        public String getBotToken() {
            return "dummy";
        }
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ callback-–¥–∞–Ω–Ω—ã–º–∏
     * 
     * @param text —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
     * @param callbackData –¥–∞–Ω–Ω—ã–µ callback
     * @return —Å–æ–∑–¥–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
     */
    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }
} 