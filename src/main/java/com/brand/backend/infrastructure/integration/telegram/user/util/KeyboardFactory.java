package com.brand.backend.infrastructure.integration.telegram.user.util;

import com.brand.backend.domain.product.model.Product;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import java.util.ArrayList;
import java.util.List;

public class KeyboardFactory {

    public static ReplyKeyboardMarkup createMainMenu() {
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(false);
        keyboardMarkup.setSelective(true);

        List<KeyboardRow> keyboard = new ArrayList<>();
        
        KeyboardRow row1 = new KeyboardRow();
        row1.add(new KeyboardButton("üõç –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"));
        row1.add(new KeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"));
        
        KeyboardRow row2 = new KeyboardRow();
        row2.add(new KeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å"));
        row2.add(new KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"));
        
        KeyboardRow row3 = new KeyboardRow();
        row3.add(new KeyboardButton("üîç –ü–æ–∏—Å–∫"));
        row3.add(new KeyboardButton("‚ùì –ü–æ–º–æ—â—å"));

        keyboard.add(row1);
        keyboard.add(row2);
        keyboard.add(row3);
        
        keyboardMarkup.setKeyboard(keyboard);
        
        return keyboardMarkup;
    }

    public static InlineKeyboardMarkup createProductCatalogKeyboard(List<Product> products, int page, int pageSize) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        int startIdx = page * pageSize;
        int endIdx = Math.min(startIdx + pageSize, products.size());

        for (int i = startIdx; i < endIdx; i++) {
            Product product = products.get(i);
            List<InlineKeyboardButton> row = new ArrayList<>();
            
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(product.getName());
            button.setCallbackData("product:" + product.getId());
            
            row.add(button);
            keyboard.add(row);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        List<InlineKeyboardButton> navigationRow = new ArrayList<>();
        
        if (page > 0) {
            InlineKeyboardButton prevButton = new InlineKeyboardButton();
            prevButton.setText("‚óÄÔ∏è –ù–∞–∑–∞–¥");
            prevButton.setCallbackData("catalog:prev:" + (page - 1));
            navigationRow.add(prevButton);
        }
        
        if (endIdx < products.size()) {
            InlineKeyboardButton nextButton = new InlineKeyboardButton();
            nextButton.setText("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è");
            nextButton.setCallbackData("catalog:next:" + (page + 1));
            navigationRow.add(nextButton);
        }
        
        if (!navigationRow.isEmpty()) {
            keyboard.add(navigationRow);
        }

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    public static InlineKeyboardMarkup createProductDetailKeyboard(Product product) {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        List<InlineKeyboardButton> quantityRow = new ArrayList<>();
        for (int i = 1; i <= 3; i++) {
            InlineKeyboardButton button = new InlineKeyboardButton();
            button.setText(String.valueOf(i));
            button.setCallbackData("quantity:" + product.getId() + ":" + i);
            quantityRow.add(button);
        }
        keyboard.add(quantityRow);

        // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
        List<InlineKeyboardButton> actionRow = new ArrayList<>();
        InlineKeyboardButton buyButton = new InlineKeyboardButton();
        buyButton.setText("üõí –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å");
        buyButton.setCallbackData("buy:" + product.getId());
        actionRow.add(buyButton);
        keyboard.add(actionRow);

        // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É");
        backButton.setCallbackData("catalog:back");
        backRow.add(backButton);
        keyboard.add(backRow);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }

    public static InlineKeyboardMarkup createOrderConfirmationKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        
        InlineKeyboardButton confirmButton = new InlineKeyboardButton();
        confirmButton.setText("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑");
        confirmButton.setCallbackData("order:confirm");
        row.add(confirmButton);
        
        InlineKeyboardButton cancelButton = new InlineKeyboardButton();
        cancelButton.setText("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å");
        cancelButton.setCallbackData("order:cancel");
        row.add(cancelButton);
        
        keyboard.add(row);
        keyboardMarkup.setKeyboard(keyboard);
        
        return keyboardMarkup;
    }
} 