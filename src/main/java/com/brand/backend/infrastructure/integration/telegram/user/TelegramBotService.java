package com.brand.backend.infrastructure.integration.telegram.user;

import com.brand.backend.domain.product.model.Product;
import com.brand.backend.domain.product.repository.ProductRepository;
import com.brand.backend.domain.user.repository.UserRepository;
import com.brand.backend.domain.user.model.User;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import com.brand.backend.application.user.service.VerificationService;

import java.util.*;

@RequiredArgsConstructor
@Service
public class TelegramBotService extends TelegramLongPollingBot {

    private final UserRepository userRepository;
    private final ProductRepository productRepository;
    private final VerificationService verificationService;

    @Override
    public String getBotUsername() {
        return "@obl1vium_bot"; // –í–∞—à–µ –∏–º—è –±–æ—Ç–∞
    }

    @Override
    public String getBotToken() {
        return "7966511776:AAH5rqOuMVme5-irMuHKOk2Od88s97oGCJc"; // –¢–æ–∫–µ–Ω –±–æ—Ç–∞
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            handleIncomingMessage(update.getMessage());
        } else if (update.hasCallbackQuery()) {
            handleCallback(update.getCallbackQuery().getData(), update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        }
    }

    private final Map<Long, String> userStates = new HashMap<>();

    private void handleIncomingMessage(Message message) {
        String chatId = String.valueOf(message.getChatId());
        String text = message.getText();

        if (userStates.containsKey(message.getChatId()) && userStates.get(message.getChatId()).equals("linkTelegram")) {
            linkTelegram(message); // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ Telegram
            return;
        }
        
        if (userStates.containsKey(message.getChatId()) && userStates.get(message.getChatId()).equals("linkDiscord")) {
            linkDiscord(message); // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≤—è–∑–∫–∏ Discord
            return;
        }

        switch (text) {
            case "/start":
                sendMessage(chatId, "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.", getMainMenuButtons());
                break;
            case "/help":
                sendMessage(chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                        "/buy - –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É\n" +
                        "/buyDesktop - –ö—É–ø–∏—Ç—å desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                        "/linkTelegram - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram-–∞–∫–∫–∞—É–Ω—Ç\n" +
                        "/linkDiscord - –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord-–∞–∫–∫–∞—É–Ω—Ç");
                break;
            case "/buy":
                showProductPage(chatId, 0);
                break;
            case "/buyDesktop":
                sendMessage(chatId, "üíª –ù–∞—à–µ desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏.");
                break;
            case "/linkTelegram":
                userStates.put(message.getChatId(), "linkTelegram"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                sendMessage(chatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞.");
                break;
            case "/linkDiscord":
                handleLinkDiscordCommand(message);
                break;
            default:
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.");
        }
    }

    private void linkTelegram(Message message) {
        String chatId = String.valueOf(message.getChatId());
        String text = message.getText();

        User user = verificationService.verifyCode(text);
        if (user != null) {
            Optional<User> existingUser = userRepository.findByTelegramId(message.getChatId());
            if (existingUser.isPresent() && !existingUser.get().equals(user)) {
                String censoredUsername = TelegramMiscMetods.censorUsername(existingUser.get().getUsername());
                sendMessage(chatId, "–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: " + censoredUsername);
                return;
            }

            user.setTelegramId(message.getChatId());
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ã—á–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (telegram_username)
            String telegramUsername = message.getFrom().getUserName();
            if (telegramUsername != null && !telegramUsername.isBlank()) {
                user.setTelegramUsername(telegramUsername);
            }
            user.setVerified(true);
            userRepository.save(user);
            sendMessage(chatId, "–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –º–æ–∂–Ω–æ –ø—Ä—è–º–æ –∑–¥–µ—Å—å!!!");
        } else {
            sendMessage(chatId, "–ö–æ–¥ –Ω–µ –≤–µ—Ä–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
        userStates.remove(message.getChatId());
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≤—è–∑–∫–∏ Discord
    private void handleLinkDiscordCommand(Message message) {
        String chatId = String.valueOf(message.getChatId());
        Long telegramId = message.getChatId();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
        Optional<User> userOptional = userRepository.findByTelegramId(telegramId);
        
        if (userOptional.isEmpty()) {
            sendMessage(chatId, "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–∞–π—Ç–µ.");
            return;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord
        String verificationCode = verificationService.generateAndSaveVerificationCodeByTelegramId(telegramId);
        if (verificationCode == null) {
            sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        StringBuilder instructions = new StringBuilder();
        instructions.append("üì± *–ö–∞–∫ –ø—Ä–∏–≤—è–∑–∞—Ç—å Discord –∞–∫–∫–∞—É–Ω—Ç:*\n\n");
        instructions.append("1. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Discord: https://discord.gg/our-bot\n");
        instructions.append("2. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É `!link ").append(verificationCode).append("`\n");
        instructions.append("3. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É `!link`, –∞ –∑–∞—Ç–µ–º –∫–æ–¥ `").append(verificationCode).append("`\n\n");
        instructions.append("‚ö†Ô∏è –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.");
        
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(instructions.toString());
        sendMessage.enableMarkdown(true);
        
        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ Discord
    private void linkDiscord(Message message) {
        // –ú—ã –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ–º –∑–¥–µ—Å—å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é Discord —á–µ—Ä–µ–∑ Telegram –±–æ—Ç,
        // —Ç–∞–∫ –∫–∞–∫ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–∞–º Discord-–∫–ª–∏–µ–Ω—Ç
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤ Discord –±–æ—Ç–µ
        String chatId = String.valueOf(message.getChatId());
        sendMessage(chatId, "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ Discord –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /linkDiscord –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.");
        userStates.remove(message.getChatId());
    }

    private void handleCallback(String data, Long chatId, Integer messageId) {
        String stringChatId = chatId.toString();
        
        if (data.equals("shop")) {
            showProductPage(stringChatId, 0);
        } else if (data.equals("help")) {
            sendMessage(stringChatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                    "/buy - –ö—É–ø–∏—Ç—å –æ–¥–µ–∂–¥—É\n" +
                    "/buyDesktop - –ö—É–ø–∏—Ç—å desktop-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n" +
                    "/linkTelegram - –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram-–∞–∫–∫–∞—É–Ω—Ç\n" +
                    "/linkDiscord - –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord-–∞–∫–∫–∞—É–Ω—Ç");
        } else if (data.equals("startLinkTelegram")) {
            userStates.put(chatId, "linkTelegram");
            sendMessage(stringChatId, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞.");
        } else if (data.equals("startLinkDiscord")) {
            handleLinkDiscordCommand(new Message() {
                @Override
                public Long getChatId() {
                    return chatId;
                }
                
                @Override
                public org.telegram.telegrambots.meta.api.objects.User getFrom() {
                    return null; // –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
                }
            });
        } else if (data.startsWith("page_")) {
            int pageIndex = Integer.parseInt(data.substring(5));
            editProductPage(chatId, messageId, pageIndex);
        } else if (data.startsWith("size_")) {
            String[] parts = data.split("_");
            Long productId = Long.parseLong(parts[1]);
            String size = parts[2];
            handleProductSelection(stringChatId, productId, size);
        }
    }

    private void showProductPage(String chatId, int pageIndex) {
        List<Product> products = productRepository.findAll();
        if (products.isEmpty()) {
            sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.");
            return;
        }

        Product product = products.get(pageIndex);
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üëï " + product.getName() + "\nüíµ –¶–µ–Ω–∞: " + product.getPrice() + " RUB");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (pageIndex > 0) {
            rows.add(List.of(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "page_" + (pageIndex - 1))));
        }

        List<InlineKeyboardButton> sizeButtons = new ArrayList<>();
        for (String size : product.getSizes()) {
            sizeButtons.add(createButton(size, "size_" + product.getId() + "_" + size));
        }
        rows.add(sizeButtons);

        if (pageIndex < products.size() - 1) {
            rows.add(List.of(createButton("‚û°Ô∏è –î–∞–ª–µ–µ", "page_" + (pageIndex + 1))));
        }

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void editProductPage(Long chatId, Integer messageId, int pageIndex) {
        List<Product> products = productRepository.findAll();
        if (products.isEmpty()) {
            return;
        }

        Product product = products.get(pageIndex);
        EditMessageText message = new EditMessageText();
        message.setChatId(chatId);
        message.setMessageId(messageId);
        message.setText("üëï " + product.getName() + "\nüíµ –¶–µ–Ω–∞: " + product.getPrice() + " USD");

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (pageIndex > 0) {
            rows.add(List.of(createButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "page_" + (pageIndex - 1))));
        }

        List<InlineKeyboardButton> sizeButtons = new ArrayList<>();
        for (String size : product.getSizes()) {
            sizeButtons.add(createButton(size, "size_" + product.getId() + "_" + size));
        }
        rows.add(sizeButtons);

        if (pageIndex < products.size() - 1) {
            rows.add(List.of(createButton("‚û°Ô∏è –î–∞–ª–µ–µ", "page_" + (pageIndex + 1))));
        }

        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void sendMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(String chatId, String text, InlineKeyboardMarkup markup) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setReplyMarkup(markup);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private InlineKeyboardMarkup getMainMenuButtons() {
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        
        // –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üëï –ú–∞–≥–∞–∑–∏–Ω", "shop"));
        row1.add(createButton("üí¨ –ü–æ–º–æ—â—å", "help"));
        rows.add(row1);
        
        // –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ - –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Telegram", "startLinkTelegram"));
        row2.add(createButton("üîó –ü—Ä–∏–≤—è–∑–∞—Ç—å Discord", "startLinkDiscord"));
        rows.add(row2);
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        markup.setKeyboard(rows);
        return markup;
    }

    private void handleProductSelection(String chatId, Long productId, String size) {
        Optional<Product> productOptional = productRepository.findById(productId);
        if (productOptional.isPresent()) {
            Product product = productOptional.get();
            String message = "–í—ã –≤—ã–±—Ä–∞–ª–∏: " + product.getName() + "\n" +
                    "–†–∞–∑–º–µ—Ä: " + size + "\n" +
                    "–¶–µ–Ω–∞: " + product.getPrice() + " USD\n\n" +
                    "–û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±—É–¥—É—â–µ–º.";
            
            sendMessage(chatId, message);
        } else {
            sendMessage(chatId, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä.");
        }
    }

}

