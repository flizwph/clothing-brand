package com.brand.backend.infrastructure.integration.telegram.admin.handlers;

import com.brand.backend.infrastructure.integration.telegram.admin.dto.OrderStatisticsDto;
import com.brand.backend.infrastructure.integration.telegram.admin.keyboards.AdminKeyboards;
import com.brand.backend.infrastructure.integration.telegram.admin.service.AdminBotService;
import com.brand.backend.domain.order.model.Order;
import com.brand.backend.domain.order.model.OrderStatus;
import com.brand.backend.domain.user.model.User;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–∫–∞–∑–∞–º–∏
 */
@Component
@Slf4j
@RequiredArgsConstructor
public class OrderHandler {

    private final AdminBotService adminBotService;
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy");
    private static final DateTimeFormatter DATETIME_FORMATTER = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
     */
    public SendMessage handleAllOrders(String chatId) {
        List<Order> orders = adminBotService.getOrdersByStatus(null);
        
        if (orders.isEmpty()) {
            return createMessage(chatId, "–ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", AdminKeyboards.createOrderFiltersKeyboard());
        }
        
        return createMessage(
            chatId, 
            formatOrdersList(orders, "–í—Å–µ –∑–∞–∫–∞–∑—ã (" + orders.size() + "):"), 
            AdminKeyboards.createOrderFiltersKeyboard()
        );
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
     */
    public SendMessage handleOrdersByStatus(String chatId, OrderStatus status) {
        List<Order> orders = adminBotService.getOrdersByStatus(status);
        
        if (orders.isEmpty()) {
            return createMessage(
                chatId, 
                "–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º " + status + " –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", 
                AdminKeyboards.createOrderFiltersKeyboard()
            );
        }
        
        return createMessage(
            chatId, 
            formatOrdersList(orders, "–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º " + status + " (" + orders.size() + "):"), 
            AdminKeyboards.createOrderFiltersKeyboard()
        );
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
     */
    public SendMessage handleTodayOrders(String chatId) {
        LocalDateTime startOfDay = LocalDateTime.of(LocalDate.now(), LocalTime.MIDNIGHT);
        List<Order> allOrders = adminBotService.getOrdersByStatus(null);
        
        List<Order> todayOrders = allOrders.stream()
                .filter(order -> order.getCreatedAt().isAfter(startOfDay))
                .toList();
        
        if (todayOrders.isEmpty()) {
            return createMessage(chatId, "–ó–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", AdminKeyboards.createOrderFiltersKeyboard());
        }
        
        return createMessage(
            chatId, 
            formatOrdersList(todayOrders, "–ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è (" + todayOrders.size() + "):"), 
            AdminKeyboards.createOrderFiltersKeyboard()
        );
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
     */
    public SendMessage handleWeekOrders(String chatId) {
        LocalDateTime startOfWeek = LocalDateTime.now().minusDays(7);
        List<Order> allOrders = adminBotService.getOrdersByStatus(null);
        
        List<Order> weekOrders = allOrders.stream()
                .filter(order -> order.getCreatedAt().isAfter(startOfWeek))
                .toList();
        
        if (weekOrders.isEmpty()) {
            return createMessage(chatId, "–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", AdminKeyboards.createOrderFiltersKeyboard());
        }
        
        return createMessage(
            chatId, 
            formatOrdersList(weekOrders, "–ó–∞–∫–∞–∑—ã –∑–∞ –Ω–µ–¥–µ–ª—é (" + weekOrders.size() + "):"), 
            AdminKeyboards.createOrderFiltersKeyboard()
        );
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏ –∑–∞ –º–µ—Å—è—Ü
     */
    public SendMessage handleMonthOrders(String chatId) {
        LocalDateTime startOfMonth = LocalDateTime.now().withDayOfMonth(1).withHour(0).withMinute(0).withSecond(0);
        List<Order> allOrders = adminBotService.getOrdersByStatus(null);
        
        List<Order> monthOrders = allOrders.stream()
                .filter(order -> order.getCreatedAt().isAfter(startOfMonth))
                .toList();
        
        if (monthOrders.isEmpty()) {
            return createMessage(chatId, "–ó–∞–∫–∞–∑–æ–≤ –∑–∞ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", AdminKeyboards.createOrderFiltersKeyboard());
        }
        
        return createMessage(
            chatId, 
            formatOrdersList(monthOrders, "–ó–∞–∫–∞–∑—ã –∑–∞ –º–µ—Å—è—Ü (" + monthOrders.size() + "):"), 
            AdminKeyboards.createOrderFiltersKeyboard()
        );
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
     */
    public SendMessage handleOrderDetails(String chatId, Long orderId) {
        Order order = adminBotService.getOrderById(orderId);
        
        if (order == null) {
            return createMessage(chatId, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
        
        return createMessage(
            chatId, 
            formatOrderDetails(order), 
            AdminKeyboards.createStatusKeyboard(order)
        );
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
     */
    public BotApiMethod<?> handleUpdateOrderStatus(String chatId, Long orderId, OrderStatus newStatus, Integer messageId) {
        Order updatedOrder = adminBotService.updateOrderStatus(orderId, newStatus);
        
        if (updatedOrder == null) {
            return createMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞.");
        }
        
        if (messageId != null) {
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId);
            editMessage.setMessageId(messageId);
            editMessage.setText(formatOrderDetails(updatedOrder));
            editMessage.setParseMode("Markdown");
            editMessage.setReplyMarkup(AdminKeyboards.createStatusKeyboard(updatedOrder));
            return editMessage;
        } else {
            return createMessage(
                chatId, 
                "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #" + updatedOrder.getOrderNumber() + " –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ " + newStatus, 
                AdminKeyboards.createStatusKeyboard(updatedOrder)
            );
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∑–∞–∫–∞–∑–æ–≤
     */
    public SendMessage handleOrderStatistics(String chatId) {
        OrderStatisticsDto stats = adminBotService.getOrderStatistics();
        
        StringBuilder message = new StringBuilder("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤*\n\n");
        
        message.append("*–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n");
        message.append("üìù –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ").append(stats.getTotalOrders()).append("\n");
        message.append("üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ").append(stats.getTotalRevenue()).append(" RUB\n");
        message.append("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ").append(stats.getTotalCompletedOrders()).append("\n");
        message.append("‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ").append(stats.getTotalCancelledOrders()).append("\n\n");
        
        message.append("*–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n");
        message.append("üÜï –ù–æ–≤—ã—Ö: ").append(stats.getNewOrders()).append("\n");
        message.append("‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: ").append(stats.getProcessingOrders()).append("\n");
        message.append("üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: ").append(stats.getDispatchedOrders()).append("\n");
        message.append("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: ").append(stats.getCompletedOrders()).append("\n");
        message.append("‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö: ").append(stats.getCancelledOrders()).append("\n\n");
        
        message.append("*–ü–æ –ø–µ—Ä–∏–æ–¥–∞–º:*\n");
        message.append("üìÜ –°–µ–≥–æ–¥–Ω—è: ").append(stats.getOrdersToday()).append("\n");
        message.append("üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: ").append(stats.getOrdersThisWeek()).append("\n");
        message.append("üìÖ –ó–∞ –º–µ—Å—è—Ü: ").append(stats.getOrdersThisMonth()).append("\n\n");
        
        message.append("*–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n");
        message.append("üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ").append(stats.getAverageOrderValue()).append(" RUB\n");
        
        return createMessage(chatId, message.toString(), AdminKeyboards.createStatisticsKeyboard());
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º
     */
    public SendMessage handleDailyStatistics(String chatId) {
        Map<LocalDate, List<Order>> ordersByDay = adminBotService.getOrdersByDays();
        
        if (ordersByDay.isEmpty()) {
            return createMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü.", AdminKeyboards.createBackKeyboard("stats:general"));
        }
        
        StringBuilder message = new StringBuilder("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º:*\n\n");
        
        for (Map.Entry<LocalDate, List<Order>> entry : ordersByDay.entrySet().stream()
                .sorted(Map.Entry.<LocalDate, List<Order>>comparingByKey().reversed())
                .toList()) {
            
            LocalDate date = entry.getKey();
            List<Order> orders = entry.getValue();
            
            BigDecimal dailyRevenue = BigDecimal.ZERO;
            for (Order order : orders) {
                dailyRevenue = dailyRevenue.add(BigDecimal.valueOf(order.getPrice()));
            }
            
            message.append("üìÖ *").append(date.format(DATE_FORMATTER)).append("*\n");
            message.append("üìù –ó–∞–∫–∞–∑–æ–≤: ").append(orders.size()).append("\n");
            message.append("üí∞ –í—ã—Ä—É—á–∫–∞: ").append(dailyRevenue).append(" RUB\n\n");
        }
        
        return createMessage(chatId, message.toString(), AdminKeyboards.createBackKeyboard("stats:general"));
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–∫–∞–∑–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public SendMessage handleUserOrders(String chatId, Long userId) {
        User user = adminBotService.getUserById(userId);
        
        if (user == null) {
            return createMessage(chatId, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
        }
        
        List<Order> userOrders = adminBotService.getOrdersByUser(user);
        
        if (userOrders.isEmpty()) {
            return createMessage(
                chatId, 
                "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + user.getUsername() + " –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", 
                AdminKeyboards.createBackKeyboard("menu:main")
            );
        }
        
        return createMessage(
            chatId, 
            formatOrdersList(userOrders, "–ó–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + user.getUsername() + " (" + userOrders.size() + "):"), 
            AdminKeyboards.createBackKeyboard("menu:main")
        );
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–ø–æ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
     */
    public SendMessage handleTopUsers(String chatId) {
        List<User> topUsers = adminBotService.getTopUsersByOrderCount(10);
        
        if (topUsers.isEmpty()) {
            return createMessage(chatId, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.", AdminKeyboards.createBackKeyboard("stats:general"));
        }
        
        StringBuilder message = new StringBuilder("üëë *–¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤:*\n\n");
        
        for (int i = 0; i < topUsers.size(); i++) {
            User user = topUsers.get(i);
            List<Order> userOrders = adminBotService.getOrdersByUser(user);
            
            BigDecimal totalSpent = BigDecimal.ZERO;
            for (Order order : userOrders) {
                totalSpent = totalSpent.add(BigDecimal.valueOf(order.getPrice()));
            }
            
            message.append(i + 1).append(". *").append(user.getUsername()).append("*\n");
            message.append("üìù –ó–∞–∫–∞–∑–æ–≤: ").append(userOrders.size()).append("\n");
            message.append("üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ").append(totalSpent).append(" RUB\n\n");
        }
        
        return createMessage(chatId, message.toString(), AdminKeyboards.createBackKeyboard("stats:general"));
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–æ–∏—Å–∫—É –∑–∞–∫–∞–∑–∞
     */
    public SendMessage handleOrderSearchRequest(String chatId) {
        String text = """
                *üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞*
                
                –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
                
                –ù–∞–ø—Ä–∏–º–µ—Ä: `/order_search #ORD-12345678`
                –ò–ª–∏: `/order_search email@example.com`
                –ò–ª–∏: `/order_search +79123456789`
                """;
        
        return createMessage(chatId, text, AdminKeyboards.createBackKeyboard("orders:all"));
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É
     */
    public SendMessage handleOrderSearch(String chatId, String query) {
        List<Order> foundOrders = new ArrayList<>();
        
        // –û—á–∏—â–∞–µ–º –æ—Ç —Å–∏–º–≤–æ–ª–∞ #, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∑–∞–ø—Ä–æ—Å–∞
        String cleanQuery = query.startsWith("#") ? query.substring(1) : query;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å email
        if (cleanQuery.contains("@")) {
            foundOrders = adminBotService.searchOrdersByEmail(cleanQuery);
        } 
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
        else if (cleanQuery.matches(".*\\d{5,}.*")) {
            foundOrders = adminBotService.searchOrdersByPhone(cleanQuery);
        } 
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
        else {
            foundOrders = adminBotService.searchOrdersByOrderNumber(cleanQuery);
        }
        
        if (foundOrders.isEmpty()) {
            return createMessage(chatId, "*üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤*\n\n–ó–∞–∫–∞–∑—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", 
                    AdminKeyboards.createBackKeyboard("orders:all"));
        }
        
        return createMessage(
            chatId, 
            formatOrdersList(foundOrders, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"" + query + "\" (" + foundOrders.size() + "):"), 
            AdminKeyboards.createBackKeyboard("orders:all")
        );
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
     */
    private String formatOrdersList(List<Order> orders, String title) {
        StringBuilder message = new StringBuilder("*" + title + "*\n\n");
        
        for (Order order : orders) {
            message.append("üîπ ").append(getStatusEmoji(order.getStatus()))
                  .append(" #").append(order.getOrderNumber());
            
            if (order.getCreatedAt() != null) {
                message.append(" (").append(order.getCreatedAt().format(DATETIME_FORMATTER)).append(")");
            }
            
            message.append("\n");
            message.append("üì¶ –¢–æ–≤–∞—Ä: ").append(escapeMarkdown(order.getProduct().getName()))
                  .append(", –†–∞–∑–º–µ—Ä: ").append(order.getSize())
                  .append(", –¶–µ–Ω–∞: ").append(order.getPrice()).append(" RUB\n");
            message.append("üë§ –ö–ª–∏–µ–Ω—Ç: ").append(escapeMarkdown(order.getUser().getUsername())).append("\n");
            message.append("/order\\_").append(order.getId()).append(" - –ø–æ–¥—Ä–æ–±–Ω–µ–µ\n\n");
        }
        
        return message.toString();
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
     */
    private String formatOrderDetails(Order order) {
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
        
        StringBuilder message = new StringBuilder();
        message.append("*–ó–∞–∫–∞–∑ #").append(order.getOrderNumber()).append("*\n\n");
        
        message.append("*–°—Ç–∞—Ç—É—Å:* ").append(getStatusEmoji(order.getStatus())).append(" ").append(order.getStatus()).append("\n");
        message.append("*ID –∑–∞–∫–∞–∑–∞:* ").append(order.getId()).append("\n");
        message.append("*–ü—Ä–æ–¥—É–∫—Ç:* ").append(escapeMarkdown(order.getProduct().getName())).append("\n");
        message.append("*–†–∞–∑–º–µ—Ä:* ").append(order.getSize()).append("\n");
        message.append("*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* ").append(order.getQuantity()).append("\n");
        message.append("*–¶–µ–Ω–∞:* ").append(order.getPrice()).append(" RUB\n\n");
        
        message.append("*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*\n");
        message.append("   *Email:* ").append(escapeMarkdown(order.getEmail())).append("\n");
        message.append("   *–¢–µ–ª–µ—Ñ–æ–Ω:* ").append(escapeMarkdown(order.getPhoneNumber())).append("\n\n");
        
        message.append("*–î–æ—Å—Ç–∞–≤–∫–∞:*\n");
        message.append("   *–ü–æ–ª–Ω–æ–µ –∏–º—è:* ").append(escapeMarkdown(order.getFullName())).append("\n");
        message.append("   *–°—Ç—Ä–∞–Ω–∞:* ").append(escapeMarkdown(order.getCountry())).append("\n");
        message.append("   *–ê–¥—Ä–µ—Å:* ").append(escapeMarkdown(order.getAddress())).append("\n");
        message.append("   *–ü–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å:* ").append(escapeMarkdown(order.getPostalCode())).append("\n\n");
        
        message.append("*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n");
        message.append("   *Telegram:* ").append(order.getTelegramUsername() != null ? escapeMarkdown(order.getTelegramUsername()) : "-").append("\n");
        message.append("   *Crypto –∞–¥—Ä–µ—Å:* ").append(order.getCryptoAddress() != null ? escapeMarkdown(order.getCryptoAddress()) : "-").append("\n");
        message.append("   *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ").append(order.getOrderComment() != null ? escapeMarkdown(order.getOrderComment()) : "-").append("\n");
        message.append("   *–ü—Ä–æ–º–æ –∫–æ–¥:* ").append(order.getPromoCode() != null ? escapeMarkdown(order.getPromoCode()) : "-").append("\n");
        message.append("   *–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* ").append(escapeMarkdown(order.getPaymentMethod())).append("\n\n");
        
        message.append("*–°–æ–∑–¥–∞–Ω:* ").append(order.getCreatedAt().format(formatter)).append("\n");
        if (order.getUpdatedAt() != null) {
            message.append("*–û–±–Ω–æ–≤–ª–µ–Ω:* ").append(order.getUpdatedAt().format(formatter)).append("\n");
        }
        
        return message.toString();
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private SendMessage createMessage(String chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        message.setParseMode("Markdown");
        return message;
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
     */
    private SendMessage createMessage(String chatId, String text, org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboard keyboard) {
        SendMessage message = createMessage(chatId, text);
        message.setReplyMarkup(keyboard);
        return message;
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
     */
    private String getStatusEmoji(OrderStatus status) {
        return switch (status) {
            case NEW -> "üÜï";
            case PROCESSING -> "‚è≥";
            case DISPATCHED -> "üì¶";
            case COMPLETED -> "‚úÖ";
            case CANCELLED -> "‚ùå";
        };
    }
    
    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç Markdown —Å–∏–º–≤–æ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
     */
    private String escapeMarkdown(String text) {
        return text.replace("*", "\\*")
                   .replace("_", "\\_")
                   .replace("[", "\\[")
                   .replace("]", "\\]")
                   .replace("(", "\\(")
                   .replace(")", "\\)");
    }
} 