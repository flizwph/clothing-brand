package ru.escapismart.service;

import com.vk.api.sdk.client.VkApiClient;
import com.vk.api.sdk.client.actors.GroupActor;
import com.vk.api.sdk.exceptions.ApiException;
import com.vk.api.sdk.exceptions.ClientException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ru.escapismart.config.AppConfig;
import ru.escapismart.dao.CryptoAlertDao;
import ru.escapismart.model.CryptoAlert;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
public class CryptoAlertService {
    private static final Logger logger = LoggerFactory.getLogger(CryptoAlertService.class);
    private static CryptoAlertService instance;
    
    private final AppConfig config;
    private final TokenChartService tokenChartService;
    private final CryptoAlertDao cryptoAlertDao;
    private final Map<String, Double> currentPrices;
    private final ScheduledExecutorService scheduler;
    
    private VkApiClient vkClient;
    private GroupActor groupActor;
    private boolean isRunning;
    
    /**
     * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (Singleton)
     */
    private CryptoAlertService() {
        config = AppConfig.getInstance();
        tokenChartService = TokenChartService.getInstance();
        cryptoAlertDao = new CryptoAlertDao();
        currentPrices = new ConcurrentHashMap<>();
        scheduler = Executors.newScheduledThreadPool(1);
        isRunning = false;
        
        logger.info("CryptoAlertService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
     */
    public static synchronized CryptoAlertService getInstance() {
        if (instance == null) {
            instance = new CryptoAlertService();
        }
        return instance;
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ VK API –∫–ª–∏–µ–Ω—Ç–∞
     */
    public void setVkClient(VkApiClient vkClient, GroupActor groupActor) {
        this.vkClient = vkClient;
        this.groupActor = groupActor;
    }
    
    /**
     * –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω
     */
    public void startMonitoring() {
        if (isRunning) {
            logger.warn("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω");
            return;
        }
        
        if (vkClient == null || groupActor == null) {
            logger.error("VK API –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω");
            return;
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        scheduler.scheduleAtFixedRate(this::checkPrices, 0, 10, TimeUnit.MINUTES);
        isRunning = true;
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–ø—É—â–µ–Ω");
    }
    
    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    public void stopMonitoring() {
        if (!isRunning) {
            return;
        }
        
        scheduler.shutdown();
        isRunning = false;
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private void checkPrices() {
        try {
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç");
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
            List<CryptoAlert> alerts = cryptoAlertDao.getAllActive();
            if (alerts.isEmpty()) {
                logger.info("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
                return;
            }
            
            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
            Map<String, List<CryptoAlert>> tokenAlerts = new java.util.HashMap<>();
            alerts.forEach(alert -> {
                String tokenSymbol = alert.getTokenSymbol();
                if (!tokenAlerts.containsKey(tokenSymbol)) {
                    tokenAlerts.put(tokenSymbol, new java.util.ArrayList<>());
                }
                tokenAlerts.get(tokenSymbol).add(alert);
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
            for (Map.Entry<String, List<CryptoAlert>> entry : tokenAlerts.entrySet()) {
                String tokenSymbol = entry.getKey();
                List<CryptoAlert> tokenSubscriptions = entry.getValue();
                
                try {
                    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
                    double currentPrice = getCurrentPrice(tokenSymbol);
                    if (currentPrice <= 0) {
                        logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ç–æ–∫–µ–Ω–∞: {}", tokenSymbol);
                        continue;
                    }
                    
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω
                    for (CryptoAlert alert : tokenSubscriptions) {
                        processAlert(alert, currentPrice);
                    }
                    
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {}: {}", 
                            tokenSymbol, e.getMessage(), e);
                }
            }
            
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
            
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: {}", e.getMessage(), e);
        }
    }
    
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
     */
    private void processAlert(CryptoAlert alert, double currentPrice) {
        try {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Ü–µ–Ω—ã, –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if (alert.getLastPrice() == 0) {
                alert.updatePrice(currentPrice, false);
                cryptoAlertDao.save(alert);
                return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (alert.shouldNotify(currentPrice)) {
                // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
                double percentChange = (currentPrice - alert.getLastPrice()) / alert.getLastPrice() * 100;
                boolean isIncrease = percentChange > 0;
                
                // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                String message = String.format(
                    "‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã\n\n" +
                    "–¢–æ–∫–µ–Ω: %s\n" +
                    "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞: $%.2f\n" +
                    "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $%.2f\n" +
                    "%s –Ω–∞ %.2f%% %s",
                    alert.getTokenSymbol(),
                    alert.getLastPrice(),
                    currentPrice,
                    isIncrease ? "–í—ã—Ä–æ—Å" : "–£–ø–∞–ª",
                    Math.abs(percentChange),
                    isIncrease ? "üìà" : "üìâ"
                );
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                sendMessage(alert.getUserId().intValue(), message);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
                alert.updatePrice(currentPrice, true);
                cryptoAlertDao.save(alert);
                
                logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {} –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã {}",
                        alert.getUserId(), alert.getTokenSymbol());
            } else {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if (alert.getLastNotification() == null ||
                    java.time.Duration.between(alert.getLastNotification(), java.time.LocalDateTime.now()).toHours() >= 2) {
                    
                    alert.updatePrice(currentPrice, false);
                    cryptoAlertDao.save(alert);
                }
            }
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ {}: {}", alert.getId(), e.getMessage(), e);
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–æ–∫–µ–Ω–∞
     */
    private double getCurrentPrice(String tokenSymbol) {
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ —á–µ—Ä–µ–∑ TokenChartService
            ru.escapismart.model.TokenChartResult result = tokenChartService.getTokenChartResult(tokenSymbol);
            double price = result.getCurrentPrice();
            
            // –ö—ç—à–∏—Ä—É–µ–º —Ü–µ–Ω—É
            currentPrices.put(tokenSymbol, price);
            
            return price;
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞ {}: {}", tokenSymbol, e.getMessage());
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
            return currentPrices.getOrDefault(tokenSymbol, 0.0);
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     */
    private void sendMessage(int userId, String message) {
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π ID –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            int randomId = (int) (Math.random() * 10000);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            vkClient.messages().send(groupActor)
                    .userId(userId)
                    .randomId(randomId)
                    .message(message)
                    .execute();
            
        } catch (ApiException | ClientException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}", userId, e.getMessage());
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean subscribeToToken(long userId, String tokenSymbol, double threshold) {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω
            if (!tokenChartService.isSupportedToken(tokenSymbol)) {
                logger.warn("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω: {}", tokenSymbol);
                return false;
            }
            
            // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            boolean result = cryptoAlertDao.activateOrCreate(userId, tokenSymbol, threshold);
            
            if (result) {
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                CryptoAlert alert = cryptoAlertDao.getByUserAndToken(userId, tokenSymbol);
                if (alert != null && alert.getLastPrice() == 0) {
                    double currentPrice = getCurrentPrice(tokenSymbol);
                    if (currentPrice > 0) {
                        alert.updatePrice(currentPrice, false);
                        cryptoAlertDao.save(alert);
                    }
                }
            }
            
            return result;
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –Ω–∞ —Ç–æ–∫–µ–Ω {}: {}", 
                    userId, tokenSymbol, e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —Ç–æ–∫–µ–Ω—É
     */
    public boolean unsubscribeFromToken(long userId, String tokenSymbol) {
        try {
            return cryptoAlertDao.deactivate(userId, tokenSymbol);
        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –æ—Ç —Ç–æ–∫–µ–Ω–∞ {}: {}", 
                    userId, tokenSymbol, e.getMessage(), e);
            return false;
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<CryptoAlert> getUserSubscriptions(long userId) {
        return cryptoAlertDao.getActiveByUser(userId);
    }
} 