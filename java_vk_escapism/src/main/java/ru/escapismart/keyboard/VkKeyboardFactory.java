package ru.escapismart.keyboard;

import com.vk.api.sdk.objects.messages.Keyboard;
import com.vk.api.sdk.objects.messages.KeyboardButton;
import com.vk.api.sdk.objects.messages.KeyboardButtonColor;
import com.vk.api.sdk.objects.messages.KeyboardButtonAction;
import com.vk.api.sdk.objects.messages.TemplateActionTypeNames;

import java.util.ArrayList;
import java.util.List;

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä,
 * –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –±–æ—Ç–µ.
 */
public class VkKeyboardFactory {
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
     */
    public static Keyboard getMainKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("üõí –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä"))
                .setColor(KeyboardButtonColor.PRIMARY));
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"))
                .setColor(KeyboardButtonColor.POSITIVE));
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"))
                .setColor(KeyboardButtonColor.DEFAULT));
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è —á–∞—Ç–∞ –∏ –ø–æ–º–æ—â–∏
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º"))
                .setColor(KeyboardButtonColor.DEFAULT));
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("‚ùì –ü–æ–º–æ—â—å"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(false);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º.
     */
    public static Keyboard getOrderManagementKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ò–Ω—Ñ–æ –æ –∑–∞–∫–∞–∑–µ"))
                .setColor(KeyboardButtonColor.POSITIVE));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–°–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö/—Ä–∞–∑–º–µ—Ä–∞"))
                .setColor(KeyboardButtonColor.PRIMARY));
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ù–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ–ª—å—à–µ 2-—Ö –º–µ—Å—è—Ü–µ–≤"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í–æ–∑–≤—Ä–∞—Ç"))
                .setColor(KeyboardButtonColor.NEGATIVE));
        
        List<KeyboardButton> row4 = new ArrayList<>();
        row4.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        allButtons.add(row4);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.
     */
    public static Keyboard getOrderKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û—Ç–º–µ–Ω–∞"))
                .setColor(KeyboardButtonColor.NEGATIVE));
        
        allButtons.add(row1);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
     */
    public static Keyboard getAdminKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ —Å –∞–¥–º–∏–Ω–æ–º"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        allButtons.add(row1);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.
     */
    public static Keyboard getCryptoKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(createCryptoButton("BTC"));
        row1.add(createCryptoButton("ETH"));
        row1.add(createCryptoButton("SOL"));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(createCryptoButton("BNB"));
        row2.add(createCryptoButton("XRP"));
        row2.add(createCryptoButton("ADA"));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(createCryptoButton("DOGE"));
        row3.add(createCryptoButton("MATIC"));
        row3.add(createCryptoButton("DOT"));
        
        List<KeyboardButton> row4 = new ArrayList<>();
        row4.add(createCryptoButton("TON"));
        row4.add(createCryptoButton("SHIB"));
        row4.add(createCryptoButton("INJ"));
        
        List<KeyboardButton> row5 = new ArrayList<>();
        row5.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        allButtons.add(row4);
        allButtons.add(row5);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–Ω–¥–æ–≤—ã–º–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏.
     */
    public static Keyboard getTrendingCryptoKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(createCryptoButton("BTC"));
        row1.add(createCryptoButton("ETH"));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í—Å–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.
     */
    private static KeyboardButton createCryptoButton(String token) {
        return new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("$" + token))
                .setColor(KeyboardButtonColor.DEFAULT);
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
     */
    public static Keyboard getPaymentKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑"))
                .setColor(KeyboardButtonColor.POSITIVE));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã"))
                .setColor(KeyboardButtonColor.NEGATIVE));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     */
    public static Keyboard getAdminPaymentKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É"))
                .setColor(KeyboardButtonColor.POSITIVE));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É"))
                .setColor(KeyboardButtonColor.NEGATIVE));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
     */
    public static Keyboard getProductCatalogKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–§–∏–∑–∏—á–µ—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–£—Å–ª—É–≥–∏"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        List<KeyboardButton> row4 = new ArrayList<>();
        row4.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û—Ç–º–µ–Ω–∞"))
                .setColor(KeyboardButtonColor.NEGATIVE));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        allButtons.add(row4);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
     */
    public static Keyboard getDigitalProductsKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ê–∫–∫–∞—É–Ω—Ç—ã VPN"))
                .setColor(KeyboardButtonColor.DEFAULT));
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ü–æ–¥–ø–∏—Å–∫–∏"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ö–ª—é—á–∏ Steam"))
                .setColor(KeyboardButtonColor.DEFAULT));
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ü—Ä–æ–≥—Ä–∞–º–º—ã"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ù–∞–∑–∞–¥"))
                .setColor(KeyboardButtonColor.PRIMARY));
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û—Ç–º–µ–Ω–∞"))
                .setColor(KeyboardButtonColor.NEGATIVE));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
     */
    public static Keyboard getPhysicalProductsKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û–¥–µ–∂–¥–∞"))
                .setColor(KeyboardButtonColor.DEFAULT));
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û–±—É–≤—å"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã"))
                .setColor(KeyboardButtonColor.DEFAULT));
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–¢–µ—Ö–Ω–∏–∫–∞"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ù–∞–∑–∞–¥"))
                .setColor(KeyboardButtonColor.PRIMARY));
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û—Ç–º–µ–Ω–∞"))
                .setColor(KeyboardButtonColor.NEGATIVE));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥
     */
    public static Keyboard getServicesKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"))
                .setColor(KeyboardButtonColor.DEFAULT));
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–î–∏–∑–∞–π–Ω"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"))
                .setColor(KeyboardButtonColor.DEFAULT));
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–ù–∞–∑–∞–¥"))
                .setColor(KeyboardButtonColor.PRIMARY));
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–û—Ç–º–µ–Ω–∞"))
                .setColor(KeyboardButtonColor.NEGATIVE));
        
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public static Keyboard getProfileKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        List<KeyboardButton> row2 = new ArrayList<>();
        row2.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"))
                .setColor(KeyboardButtonColor.DEFAULT));
        
        List<KeyboardButton> row3 = new ArrayList<>();
        row3.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"))
                .setColor(KeyboardButtonColor.POSITIVE));
        
        List<KeyboardButton> row4 = new ArrayList<>();
        row4.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
                .setColor(KeyboardButtonColor.PRIMARY));
                
        allButtons.add(row1);
        allButtons.add(row2);
        allButtons.add(row3);
        allButtons.add(row4);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
    
    /**
     * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
     */
    public static Keyboard getBackToMenuKeyboard() {
        Keyboard keyboard = new Keyboard();
        List<List<KeyboardButton>> allButtons = new ArrayList<>();
        
        List<KeyboardButton> row1 = new ArrayList<>();
        row1.add(new KeyboardButton()
                .setAction(new KeyboardButtonAction()
                .setType(TemplateActionTypeNames.TEXT)
                .setLabel("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"))
                .setColor(KeyboardButtonColor.PRIMARY));
        
        allButtons.add(row1);
        
        keyboard.setButtons(allButtons);
        keyboard.setOneTime(true);
        
        return keyboard;
    }
} 